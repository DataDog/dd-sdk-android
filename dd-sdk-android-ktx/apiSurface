fun launchTraced(String, kotlin.coroutines.CoroutineContext = EmptyCoroutineContext, kotlinx.coroutines.CoroutineStart = CoroutineStart.DEFAULT, CoroutineScopeSpan.() -> Unit): kotlinx.coroutines.Job
fun <T> runBlockingTraced(String, kotlin.coroutines.CoroutineContext = EmptyCoroutineContext, kotlinx.coroutines.CoroutineScope.() -> T): T
fun <T: Any?> asyncTraced(String, kotlin.coroutines.CoroutineContext = EmptyCoroutineContext, kotlinx.coroutines.CoroutineStart = CoroutineStart.DEFAULT, CoroutineScopeSpan.() -> T): kotlinx.coroutines.Deferred<T>
fun <T: Any?> awaitTraced(String): T
fun <T: Any?> withContextTraced(String, kotlin.coroutines.CoroutineContext, CoroutineScopeSpan.() -> T): T
interface com.datadog.android.ktx.coroutine.CoroutineScopeSpan : kotlinx.coroutines.CoroutineScope, io.opentracing.Span
fun <T> sendErrorToDatadog(): kotlinx.coroutines.flow.Flow<T>
fun <T: java.io.Closeable, R> useMonitored((T) -> R): R
fun getAssetAsRumResource(String, Int = AssetManager.ACCESS_STREAMING): java.io.InputStream
fun getRawResAsRumResource(Int): java.io.InputStream
fun asRumResource(String): java.io.InputStream
fun <T> transactionTraced(String, Boolean = true, io.opentracing.Span.(android.database.sqlite.SQLiteDatabase) -> T): T
fun parentSpan(io.opentracing.Span): okhttp3.Request.Builder
fun setError(Throwable)
fun setError(String)
fun <T: Any?> withinSpan(String, io.opentracing.Span? = null, Boolean = true, io.opentracing.Span.() -> T): T
