build:
  maxIssues: 0
  excludeCorrectable: false
  weights:
  # complexity: 2
  # LongParameterList: 1
  # style: 1
  # comments: 1

config:
  validation: true
  warningsAsErrors: true
  checkExhaustiveness: false
  # when writing own rules with new properties, exclude the property path e.g.: 'my_rule_set,.*>.*>[my_property]'
  excludes: ''

processors:
  active: true
  exclude:
  # - 'DetektProgressListener'
  # - 'FunctionCountProcessor'
  # - 'PropertyCountProcessor'
  # - 'ClassCountProcessor'
  # - 'PackageCountProcessor'
  # - 'KtFileCountProcessor'
  # - 'ProjectComplexityProcessor'
  # - 'ProjectCognitiveComplexityProcessor'
  # - 'ProjectLLOCProcessor'
  # - 'ProjectCLOCProcessor'
  # - 'ProjectLOCProcessor'
  # - 'ProjectSLOCProcessor'
  # - 'LicenseHeaderLoaderExtension'

console-reports:
  active: true
  exclude:
  #  - 'ProjectStatisticsReport'
  #  - 'ComplexityReport'
  #  - 'NotificationReport'
  #  - 'FindingsReport'
  #  - 'FileBasedFindingsReport'
  #  - 'BuildFailureReport'
  #  - 'LiteFindingsReport'

output-reports:
  active: true
  exclude:
  # - 'TxtOutputReport'
  # - 'XmlOutputReport'
  # - 'HtmlOutputReport'
  # - 'MdOutputReport'
  # - 'SarifOutputReport'

comments:
  active: false

complexity:
  active: false

coroutines:
  active: false

empty-blocks:
  active: false

exceptions:
  active: false

naming:
  active: false

potential-bugs:
  active: false

style:
  active: false

datadog:
  active: true
  excludes:
    - '**/build/**'
    - '**/test/**'
    - '**/testDebug/**'
    - '**/testRelease/**'
    - '**/androidTest/**'
    - '**/testFixtures/**'
    - '**/buildSrc/**'
    - '**/*.kts'
    - '**/instrumented/**'
    - '**/reliability/**'
    - '**/sample/**'
    - '**/tools/**'
  ThreadSafety:
    active: true
    workerThreadSwitchingCalls:
      - "com.datadog.android.core.internal.utils.submitSafe"
      - "com.datadog.android.core.internal.utils.executeSafe"
      - "com.datadog.android.core.internal.utils.scheduleSafe"
      - "com.datadog.android.api.feature.FeatureScope.withWriteContext"
    mainThreadSwitchingCalls:
      - "android.widget.LinearLayout.post"
  TodoWithoutTask:
    active: true
    deprecatedPrefixes:
      - "RUMM"
      - "REPLAY"
  PackageNameVisibility:
    active: true
    withBreakingChanges: true
    ignoredAnnotations:
      - "com.datadog.android.lint.InternalApi"
  UnsafeThirdPartyFunctionCall:
    active: true
    internalPackagePrefix: 'com.datadog'
    treatUnknownFunctionAsThrowing: true
    treatUnknownConstructorAsThrowing: true
    knownThrowingCalls:
      # region Android
      - "android.app.ActivityManager.getHistoricalProcessExitReasons(kotlin.String?, kotlin.Int, kotlin.Int):java.lang.RuntimeException"
      - "android.content.pm.PackageManager.getPackageInfo(kotlin.String, android.content.pm.PackageManager.PackageInfoFlags):android.content.pm.PackageManager.NameNotFoundException"
      - "android.content.pm.PackageManager.getPackageInfo(kotlin.String, kotlin.Int):android.content.pm.PackageManager.NameNotFoundException"
      - "android.content.res.AssetManager.open(kotlin.String):java.io.IOException"
      - "android.content.res.Resources.getResourceEntryName(kotlin.Int):android.content.res.Resources.NotFoundException"
      - "android.content.res.Resources.getResourceName(kotlin.Int):android.content.res.Resources.NotFoundException"
      - "android.content.res.Resources.openRawResource(kotlin.Int):android.content.res.Resources.NotFoundException"
      - "android.database.sqlite.SQLiteDatabase.beginTransaction():java.lang.IllegalStateException"
      - "android.database.sqlite.SQLiteDatabase.beginTransactionNonExclusive():java.lang.IllegalStateException"
      - "android.database.sqlite.SQLiteDatabase.endTransaction():java.lang.IllegalStateException"
      - "android.database.sqlite.SQLiteDatabase.setTransactionSuccessful():java.lang.IllegalStateException"
      - "android.graphics.Bitmap.compress(android.graphics.Bitmap.CompressFormat, kotlin.Int, java.io.OutputStream):java.lang.NullPointerException,java.lang.IllegalArgumentException"
      - "android.graphics.Bitmap.copy(android.graphics.Bitmap.Config, kotlin.Boolean):java.lang.IllegalArgumentException"
      - "android.graphics.Bitmap.createBitmap(android.util.DisplayMetrics?, kotlin.Int, kotlin.Int, android.graphics.Bitmap.Config):java.lang.IllegalArgumentException"
      - "android.graphics.Bitmap.createBitmap(kotlin.Int, kotlin.Int, android.graphics.Bitmap.Config):java.lang.IllegalArgumentException"
      - "android.graphics.Bitmap.createScaledBitmap(android.graphics.Bitmap, kotlin.Int, kotlin.Int, kotlin.Boolean):java.lang.IllegalArgumentException"
      - "android.graphics.Canvas.constructor(android.graphics.Bitmap):java.lang.IllegalStateException"
      - "android.graphics.Color.parseColor(kotlin.String?):java.lang.IllegalArgumentException"
      - "android.graphics.drawable.LayerDrawable.getDrawable(kotlin.Int):java.lang.IndexOutOfBoundsException"
      - "android.net.ConnectivityManager.registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback):java.lang.IllegalArgumentException,java.lang.SecurityException"
      - "android.net.ConnectivityManager.unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback):java.lang.SecurityException"
      - "android.provider.Settings.System.getInt(android.content.ContentResolver?, kotlin.String?):android.provider.Settings.SettingNotFoundException"
      - "android.util.Base64.encodeToString(kotlin.ByteArray?, kotlin.Int):java.lang.AssertionError"
      - "android.view.Choreographer.getInstance():java.lang.IllegalStateException"
      - "android.view.Choreographer.postFrameCallback():java.lang.IllegalArgumentException"
      - "android.view.MotionEvent.obtain(android.view.MotionEvent):java.lang.IllegalArgumentException"
      - "android.view.View.getLocationInWindow(kotlin.IntArray):java.lang.IllegalArgumentException"
      - "android.view.ViewTreeObserver.removeOnDrawListener(android.view.ViewTreeObserver.OnDrawListener?):java.lang.IllegalStateException"
      - "android.view.ViewTreeObserver.addOnDrawListener(android.view.ViewTreeObserver.OnDrawListener?):java.lang.IllegalStateException"
      - "android.view.Window.addOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener, android.os.Handler?):java.lang.IllegalStateException,java.lang.NullPointerException"
      - "android.view.Window.removeOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener?):java.lang.IllegalArgumentException"
      - "android.widget.FrameLayout.addView(android.view.View, android.view.ViewGroup.LayoutParams):java.lang.IllegalArgumentException"
      - "android.widget.LinearLayout.addView(android.view.View):java.lang.IllegalArgumentException"
      - "androidx.collection.LruCache.constructor(kotlin.Int):java.lang.IllegalArgumentException"
      - "androidx.collection.LruCache.get(java.io.File):java.lang.NullPointerException"
      - "androidx.collection.LruCache.get(kotlin.String):java.lang.NullPointerException"
      - "androidx.collection.LruCache.put(java.io.File, kotlin.Unit):java.lang.NullPointerException"
      - "androidx.collection.LruCache.remove(java.io.File):java.lang.NullPointerException"
      - "androidx.metrics.performance.JankStats.createAndTrack(android.view.Window, androidx.metrics.performance.JankStats.OnFrameListener):java.lang.IllegalStateException"
      - "androidx.navigation.Navigation.findNavController(android.app.Activity, kotlin.Int):java.lang.IllegalStateException"
      - "androidx.work.WorkManager.enqueueUniqueWork(kotlin.String, androidx.work.ExistingWorkPolicy, androidx.work.OneTimeWorkRequest):java.util.concurrent.RejectedExecutionException,java.lang.NullPointerException"
      - "androidx.work.Data.Builder.build():java.lang.IllegalStateException"
      # endregion
      # region Java File
      - "java.io.ByteArrayOutputStream.write(kotlin.ByteArray, kotlin.Int, kotlin.Int):java.lang.IndexOutOfBoundsException"
      - "java.io.File.canRead():java.lang.SecurityException"
      - "java.io.File.canWrite():java.lang.SecurityException"
      - "java.io.File.delete():java.lang.SecurityException"
      - "java.io.File.deleteRecursively():java.io.FileNotFoundException,java.lang.SecurityException"
      - "java.io.File.exists():java.lang.SecurityException"
      - "java.io.File.inputStream():java.io.FileNotFoundException,java.lang.SecurityException"
      - "java.io.File.isDirectory():java.lang.SecurityException"
      - "java.io.File.isFile():java.lang.SecurityException"
      - "java.io.File.length():java.lang.SecurityException"
      - "java.io.File.listFiles():java.lang.SecurityException"
      - "java.io.File.mkdirs():java.lang.SecurityException"
      - "java.io.File.readBytes():java.io.FileNotFoundException,java.lang.SecurityException"
      - "java.io.File.readLines(java.nio.charset.Charset):java.io.FileNotFoundException,java.io.IOException,java.lang.SecurityException"
      - "java.io.File.readText(java.nio.charset.Charset):java.io.FileNotFoundException,java.io.IOException,java.lang.SecurityException"
      - "java.io.FileInputStream.read(kotlin.ByteArray, kotlin.Int, kotlin.Int):java.io.IOException"
      - "java.io.FileInputStream.use(kotlin.Function1):java.io.IOException"
      - "java.io.FileOutputStream.use(kotlin.Function1):java.io.IOException"
      - "java.io.FileOutputStream.write(kotlin.ByteArray):java.io.IOException"
      - "java.io.InputStream.available():java.io.IOException"
      - "java.io.InputStream.close():java.io.IOException"
      - "java.io.InputStream.read():java.io.IOException"
      - "java.io.InputStream.read(kotlin.ByteArray):java.io.IOException"
      - "java.io.InputStream.read(kotlin.ByteArray, kotlin.Int, kotlin.Int):java.io.IOException"
      - "java.io.InputStream.reset():java.io.IOException"
      - "java.io.InputStream.skip(kotlin.Long):java.io.IOException"
      - "java.io.InputStream.use(kotlin.Function1):java.io.IOException"
      - "java.io.InputStreamReader.readText():java.io.IOException"
      - "java.nio.ByteBuffer.allocate(kotlin.Int):java.lang.IllegalArgumentException"
      - "java.nio.ByteBuffer.array():java.nio.ReadOnlyBufferException,java.lang.UnsupportedOperationException"
      - "java.nio.ByteBuffer.put(kotlin.ByteArray):java.nio.BufferOverflowException,java.nio.ReadOnlyBufferException"
      - "java.nio.ByteBuffer.putInt(kotlin.Int):java.nio.BufferOverflowException,java.nio.ReadOnlyBufferException"
      - "java.nio.ByteBuffer.putShort(kotlin.Short):java.nio.BufferOverflowException,java.nio.ReadOnlyBufferException"
      - "java.nio.channels.FileChannel.lock():java.io.IOException,java.lang.IllegalStateException"
      - "java.nio.channels.FileLock.release():java.io.IOException"
      # endregion
      # region Java Concurrency
      - "java.lang.Thread.constructor(java.lang.Runnable?, kotlin.String?):java.lang.NullPointerException,java.lang.SecurityException,java.lang.IllegalArgumentException"
      - "java.lang.Thread.constructor(java.lang.Runnable, kotlin.String):java.lang.NullPointerException,java.lang.SecurityException,java.lang.IllegalArgumentException"
      - "java.lang.Thread.getAllStackTraces():java.lang.SecurityException"
      - "java.lang.Thread.interrupt():java.lang.SecurityException"
      - "java.lang.Thread.sleep(kotlin.Long):java.lang.IllegalArgumentException,java.lang.InterruptedException"
      - "java.util.concurrent.BlockingQueue.drainTo(kotlin.collections.MutableCollection):java.lang.UnsupportedOperationException,java.lang.ClassCastException,java.lang.NullPointerException,java.lang.IllegalArgumentException"
      - "java.util.concurrent.BlockingQueue.drainTo(kotlin.collections.MutableCollection?):java.lang.UnsupportedOperationException,java.lang.ClassCastException,java.lang.NullPointerException,java.lang.IllegalArgumentException"
      - "java.util.concurrent.Callable.call():java.lang.Exception"
      - "java.util.concurrent.ConcurrentHashMap.contains(kotlin.Any?):java.lang.NullPointerException"
      - "java.util.concurrent.ConcurrentHashMap.remove(com.datadog.android.api.feature.FeatureContextUpdateReceiver):java.lang.NullPointerException"
      - "java.util.concurrent.ConcurrentHashMap.remove(kotlin.String?):java.lang.NullPointerException"
      - "java.util.concurrent.ConcurrentLinkedQueue.offer(com.datadog.android.sessionreplay.internal.async.RecordedDataQueueItem):java.lang.NullPointerException"
      - "java.util.concurrent.CopyOnWriteArraySet.removeAll(kotlin.collections.Collection):java.lang.NullPointerException,java.lang.ClassCastException"
      - "java.util.concurrent.CountDownLatch.await(kotlin.Long, java.util.concurrent.TimeUnit?):java.lang.InterruptedException"
      - "java.util.concurrent.CountDownLatch.constructor(kotlin.Int):java.lang.IllegalArgumentException"
      - "java.util.concurrent.Executor.execute(java.lang.Runnable):java.util.concurrent.RejectedExecutionException,java.lang.NullPointerException"
      - "java.util.concurrent.ExecutorService.awaitTermination(kotlin.Long, java.util.concurrent.TimeUnit?):java.lang.InterruptedException"
      - "java.util.concurrent.ExecutorService.execute(java.lang.Runnable?):java.util.concurrent.RejectedExecutionException,java.lang.NullPointerException"
      - "java.util.concurrent.ExecutorService.submit(java.lang.Runnable?):java.util.concurrent.RejectedExecutionException,java.lang.NullPointerException"
      - "java.util.concurrent.Future.get():java.lang.InterruptedException,java.util.concurrent.CancellationException,java.util.concurrent.ExecutionException"
      - "java.util.concurrent.LinkedBlockingQueue.offer(kotlin.Any?):java.lang.NullPointerException"
      - "java.util.concurrent.LinkedBlockingQueue.offer(kotlin.Any?, kotlin.Long, java.util.concurrent.TimeUnit?):java.lang.NullPointerException"
      - "java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, kotlin.Long, java.util.concurrent.TimeUnit):java.util.concurrent.RejectedExecutionException,java.lang.NullPointerException"
      - "java.util.concurrent.ScheduledThreadPoolExecutor.awaitTermination(kotlin.Long, java.util.concurrent.TimeUnit?):java.lang.InterruptedException"
      - "java.util.concurrent.ScheduledThreadPoolExecutor.constructor(kotlin.Int):java.lang.IllegalArgumentException"
      - "java.util.concurrent.ScheduledThreadPoolExecutor.schedule(java.lang.Runnable, kotlin.Long, java.util.concurrent.TimeUnit):java.util.concurrent.RejectedExecutionException,java.lang.NullPointerException"
      - "java.util.concurrent.ThreadPoolExecutor.constructor(kotlin.Int, kotlin.Int, kotlin.Long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue):java.lang.NullPointerException,java.lang.IllegalArgumentException"
      # endregion
      # region Java misc
      - "java.io.PrintWriter.constructor(java.io.Writer):java.lang.NullPointerException"
      - "java.lang.Character.toChars(kotlin.Int):java.lang.IllegalArgumentException"
      - "java.lang.Class.forName(kotlin.String?):java.lang.LinkageError,java.lang.ExceptionInInitializerError,java.lang.ClassNotFoundException"
      - "java.lang.Class.getDeclaredField(kotlin.String?):java.lang.NoSuchFieldException,java.lang.SecurityException,java.lang.NullPointerException"
      - "java.lang.Class.getDeclaredMethod(kotlin.String?, kotlin.Array?):java.lang.NoSuchMethodException,java.lang.SecurityException,java.lang.NullPointerException"
      - "java.lang.Class.getMethod(kotlin.String?, kotlin.Array?):java.lang.NoSuchMethodException,java.lang.SecurityException,java.lang.NullPointerException"
      - "java.lang.Class.isAssignableFrom(java.lang.Class?):java.lang.NullPointerException"
      - "java.lang.Runtime.addShutdownHook(java.lang.Thread):java.lang.IllegalArgumentException,java.lang.IllegalStateException,java.lang.SecurityException"
      - "java.lang.Runtime.removeShutdownHook(java.lang.Thread?):java.lang.IllegalStateException,java.lang.SecurityException"
      - "java.lang.StringBuilder.constructor(kotlin.Int):java.lang.NegativeArraySizeException"
      - "java.lang.System.arraycopy(kotlin.Any, kotlin.Int, kotlin.Any, kotlin.Int, kotlin.Int):java.lang.IndexOutOfBoundsException,java.lang.ArrayStoreException,java.lang.NullPointerException"
      - "java.lang.System.loadLibrary(kotlin.String?):java.lang.SecurityException,java.lang.UnsatisfiedLinkError,java.lang.NullPointerException"
      - "java.lang.reflect.Field.get(kotlin.Any):java.lang.IllegalAccessException,java.lang.IllegalArgumentException,java.lang.NullPointerException,java.lang.ExceptionInInitializerError"
      - "java.lang.reflect.Field.get(kotlin.Any?):java.lang.IllegalAccessException,java.lang.IllegalArgumentException,java.lang.NullPointerException,java.lang.ExceptionInInitializerError"
      - "java.math.BigInteger.and(java.math.BigInteger?):java.lang.NumberFormatException,java.lang.ArithmeticException"
      - "java.math.BigInteger.constructor(kotlin.String?, kotlin.Int):java.lang.NumberFormatException,java.lang.ArithmeticException"
      - "java.math.BigInteger.shiftRight(kotlin.Int):java.lang.NumberFormatException,java.lang.ArithmeticException"
      - "java.net.URL.constructor(kotlin.String?):java.net.MalformedURLException"
      - "java.security.MessageDigest.digest(kotlin.ByteArray?):java.security.DigestException,java.lang.NullPointerException,java.lang.IllegalArgumentException"
      - "java.security.MessageDigest.getInstance(kotlin.String?):java.security.NoSuchAlgorithmException"
      - "java.text.SimpleDateFormat.constructor(kotlin.String, java.util.Locale):java.lang.NullPointerException"
      - "java.text.SimpleDateFormat.format(java.util.Date):java.lang.NullPointerException"
      - "java.text.SimpleDateFormat.format(kotlin.Any):java.lang.IllegalArgumentException,java.lang.NullPointerException"
      - "java.text.SimpleDateFormat.parse(kotlin.String):java.text.ParseException,java.lang.NullPointerException"
      - "java.util.TimeZone.getTimeZone(kotlin.String):java.lang.NullPointerException"
      # endregion
      # region Java Collections
      - "java.util.Collections.newSetFromMap(kotlin.collections.MutableMap?):java.lang.IllegalArgumentException"
      - "java.util.LinkedList.add(kotlin.Int, android.view.View):java.lang.IndexOutOfBoundsException"
      - "java.util.LinkedList.add(kotlin.Int, com.datadog.android.webview.internal.rum.domain.WebViewNativeRumViewsCache.ViewEntry):java.lang.IndexOutOfBoundsException"
      - "java.util.LinkedList.offer(com.datadog.android.core.internal.data.upload.UploadWorker.UploadNextBatchTask):java.lang.ClassCastException,java.lang.NullPointerException,java.lang.IllegalArgumentException"
      - "java.util.LinkedList.removeFirst():java.util.NoSuchElementException"
      - "java.util.LinkedList.removeLast():java.util.NoSuchElementException"
      - "java.util.Queue.offer(com.datadog.android.sessionreplay.internal.async.RecordedDataQueueItem?):java.lang.IllegalArgumentException,java.lang.ClassCastException,java.lang.NullPointerException"
      # endregion
      # region Java Zip
      - "java.util.zip.Deflater.deflate(kotlin.ByteArray, kotlin.Int, kotlin.Int, kotlin.Int):java.lang.IllegalArgumentException"
      # endregion
      # region Kotlin primitives
      - "kotlin.ByteArray.copyOf(kotlin.Int):java.lang.NegativeArraySizeException"
      - "kotlin.ByteArray.copyOfRange(kotlin.Int, kotlin.Int):java.lang.IndexOutOfBoundsException,java.lang.IllegalArgumentException"
      - "kotlin.ByteArray.get(kotlin.Int):java.lang.IndexOutOfBoundsException"
      - "kotlin.Char.digitToInt():kotlin:IllegalArgumentException"
      - "kotlin.Double.roundToLong():java.lang.IllegalArgumentException"
      - "kotlin.String.format(kotlin.Array):java.util.IllegalFormatException"
      - "kotlin.String.get(kotlin.Int):java.lang.IndexOutOfBoundsException"
      - "kotlin.String.substring(kotlin.Int):java.lang.IndexOutOfBoundsException"
      - "kotlin.String.substring(kotlin.Int, kotlin.Int):java.lang.IndexOutOfBoundsException"
      - "kotlin.String.takeLast(kotlin.Int):java.lang.IllegalArgumentException"
      - "kotlin.String.takeLast(kotlin.Int):kotlin.IllegalArgumentException"
      - "kotlin.String.toLong():java.lang.NumberFormatException"
      - "kotlin.collections.MutableSet.first():java.util.NoSuchElementException"
      - "kotlin.String.format(kotlin.Array):java.util.IllegalFormatException"
      - "kotlin.ByteArray.copyOf(kotlin.Int):java.lang.NegativeArraySizeException"
      - "kotlin.ByteArray.copyOfRange(kotlin.Int, kotlin.Int):java.lang.IndexOutOfBoundsException,java.lang.IllegalArgumentException"
      - "kotlin.ByteArray.get(kotlin.Int):java.lang.IndexOutOfBoundsException"
      - "kotlin.Double.roundToLong():java.lang.IllegalArgumentException"
      # endregion
      # region Kotlin Collections
      - "kotlin.Array.first(kotlin.Function1):java.util.NoSuchElementException"
      - "kotlin.ByteArray.toRequestBody(okhttp3.MediaType?, kotlin.Int, kotlin.Int):java.lang.ArrayIndexOutOfBoundsException,java.io.IOException"
      - "kotlin.String.toRequestBody(okhttp3.MediaType?):java.lang.ArrayIndexOutOfBoundsException,java.io.IOException"
      - "kotlin.collections.HashMap(kotlin.collections.MutableMap?):java.lang.NullPointerException"
      - "kotlin.collections.List.first():java.util.NoSuchElementException"
      - "kotlin.collections.List.get(kotlin.Int):java.util.NoSuchElementException"
      - "kotlin.collections.List.last():java.util.NoSuchElementException"
      - "kotlin.collections.MutableIterator.next():java.util.NoSuchElementException"
      - "kotlin.collections.MutableIterator.remove():java.lang.UnsupportedOperationException,java.lang.IllegalStateException"
      - "kotlin.collections.MutableSet.first():java.util.NoSuchElementException"
      - "kotlin.collections.MutableSet.last():java.util.NoSuchElementException"
      # endregion
      # region Kotlin Coroutines
      - "kotlinx.coroutines.Deferred.await():java.util.concurrent.CancellationException"
      - "kotlinx.coroutines.flow.Flow.collect(kotlinx.coroutines.flow.FlowCollector):java.lang.Exception"
      - "kotlinx.coroutines.flow.Flow.collect(kotlin.coroutines.SuspendFunction1):java.lang.Exception"
      - "kotlinx.coroutines.runBlocking(kotlin.coroutines.CoroutineContext, kotlin.coroutines.SuspendFunction1):java.lang.InterruptedException"
      - "kotlinx.coroutines.withContext(kotlin.coroutines.CoroutineContext, kotlin.coroutines.SuspendFunction1):kotlinx.coroutines.CancellationException"
      # endregion
      # region OkHttp
      - "okhttp3.Call.execute():java.io.IOException"
      - "okhttp3.Dns.lookup(kotlin.String):java.net.UnknownHostException"
      - "okhttp3.HttpUrl.toUrl():java.lang.RuntimeException"
      - "okhttp3.MultipartBody.Builder.build():java.lang.IllegalStateException"
      - "okhttp3.MultipartBody.Builder.setType(okhttp3.MediaType):java.lang.IllegalArgumentException"
      - "okhttp3.Response.peekBody(kotlin.Long):java.io.IOException,java.lang.IllegalArgumentException,java.lang.IllegalStateException"
      - "okhttp3.RequestBody.writeTo(okio.BufferedSink):java.io.IOException"
      - "okhttp3.Response.close():java.lang.IllegalStateException"
      - "okhttp3.Request.Builder.build():java.lang.IllegalStateException"
      - "okhttp3.Request.Builder.url(kotlin.String):java.lang.NullPointerException,java.lang.IllegalArgumentException"
      - "okhttp3.Request.Builder.post(okhttp3.RequestBody):java.lang.NullPointerException,java.lang.IllegalArgumentException"
      - "okhttp3.Request.Builder.method(kotlin.String, okhttp3.RequestBody?):java.lang.NullPointerException,java.lang.IllegalArgumentException"
      - "okhttp3.Request.Builder.tag(java.lang.Class, io.opentracing.Span?):java.lang.NullPointerException"
      - "okhttp3.Request.Builder.tag(java.lang.Class, com.datadog.android.okhttp.TraceContext?):java.lang.ClassCastException"
      - "okhttp3.Request.Builder.url(kotlin.String):java.lang.NullPointerException,java.lang.IllegalArgumentException"
      - "okhttp3.Interceptor.Chain.proceed(okhttp3.Request):java.io.IOException"
      - "okhttp3.RequestBody.writeTo(okio.BufferedSink):java.io.IOException"
      - "okhttp3.OkHttpClient.Builder.addInterceptor(okhttp3.Interceptor):java.lang.IllegalArgumentException"
      - "okhttp3.OkHttpClient.Builder.addNetworkInterceptor(okhttp3.Interceptor):java.lang.IllegalArgumentException"
      - "okhttp3.OkHttpClient.Builder.dns(okhttp3.Dns):java.lang.IllegalArgumentException"
      - "okhttp3.OkHttpClient.Builder.eventListenerFactory(okhttp3.EventListener.Factory):java.lang.NullPointerException"
      - "okio.BufferedSink.close():java.io.IOException"
      - "okio.Okio.buffer(okio.Sink):java.lang.NullPointerException"
      - "okio.Buffer.readString(java.nio.charset.Charset):java.lang.IllegalArgumentException,java.io.IOException"
      - "okio.Buffer.readByteArray():java.io.EOFException"
      # endregion
      # region org.json
      - "org.json.JSONArray.get(kotlin.Int):org.json.JSONException"
      - "org.json.JSONObject.get(kotlin.String):org.json.JSONException"
      # endregion
      # region OpenTracing
      - "io.opentracing.Scope.close():java.io.IOException"
      # endregion
      # region Gson
      - "com.google.gson.JsonParser.parseString(kotlin.String?):com.google.gson.JsonParseException"
      # endregion
      # region Kronos
      - "com.lyft.kronos.KronosClock.syncInBackground():java.lang.IllegalStateException"
      # endregion
      # region SQLDelight
      - "com.squareup.sqldelight.transaction(kotlin.Boolean, kotlin.Function1):java.lang.IllegalStateException"
      - "com.squareup.sqldelight.transactionWithResult(kotlin.Boolean, kotlin.Function1):java.lang.IllegalStateException"
      # endregion
    knownSafeCalls:
      # region Android APIs
      - "android.app.Activity.getSystemService(kotlin.String)"
      - "android.app.Activity.hashCode()"
      - "android.app.Application.registerActivityLifecycleCallbacks(android.app.Application.ActivityLifecycleCallbacks?)"
      - "android.app.Application.unregisterActivityLifecycleCallbacks(android.app.Application.ActivityLifecycleCallbacks?)"
      - "android.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentActivityCreated(android.app.FragmentManager?, android.app.Fragment?, android.os.Bundle?)"
      - "android.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentAttached(android.app.FragmentManager, android.app.Fragment, android.content.Context)"
      - "android.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentDestroyed(android.app.FragmentManager, android.app.Fragment)"
      - "android.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentPaused(android.app.FragmentManager, android.app.Fragment)"
      - "android.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentResumed(android.app.FragmentManager?, android.app.Fragment?)"
      - "android.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentStarted(android.app.FragmentManager, android.app.Fragment)"
      - "android.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentStopped(android.app.FragmentManager?, android.app.Fragment?)"
      - "android.app.FragmentManager.registerFragmentLifecycleCallbacks(android.app.FragmentManager.FragmentLifecycleCallbacks?, kotlin.Boolean)"
      - "android.app.FragmentManager.unregisterFragmentLifecycleCallbacks(android.app.FragmentManager.FragmentLifecycleCallbacks?)"
      - "android.content.ComponentName.resolveViewUrl()"
      - "android.content.Context.createDeviceProtectedStorageContext()"
      - "android.content.Context.getSystemService(kotlin.String)"
      - "android.content.Context.registerComponentCallbacks(android.content.ComponentCallbacks?)"
      - "android.content.Context.registerReceiver(android.content.BroadcastReceiver?, android.content.IntentFilter?)"
      - "android.content.Context.registerReceiver(android.content.BroadcastReceiver?, android.content.IntentFilter?, kotlin.Int)"
      - "android.content.Context.resourceIdName(kotlin.Int)"
      - "android.content.Context.unregisterComponentCallbacks(android.content.ComponentCallbacks?)"
      - "android.content.Context.unregisterReceiver(android.content.BroadcastReceiver?)"
      - "android.content.Intent.getBooleanExtra(kotlin.String?, kotlin.Boolean)"
      - "android.content.Intent.getIntExtra(kotlin.String?, kotlin.Int)"
      - "android.content.IntentFilter.addAction(kotlin.String?)"
      - "android.content.IntentFilter.constructor()"
      - "android.content.IntentFilter.constructor(kotlin.String?)"
      - "android.content.pm.PackageManager.PackageInfoFlags.of(kotlin.Long)"
      - "android.content.pm.PackageManager.hasSystemFeature(kotlin.String)"
      - "android.content.res.AssetManager.open(kotlin.String, kotlin.Int)"
      - "android.content.res.ColorStateList.getColor(kotlin.IntArray)"
      - "android.content.res.ColorStateList.getColorForState(kotlin.IntArray?, kotlin.Int)"
      - "android.content.res.Resources.Theme.resolveAttribute(kotlin.Int, android.util.TypedValue?, kotlin.Boolean)"
      - "android.database.DatabaseErrorHandler.onCorruption(android.database.sqlite.SQLiteDatabase?)"
      - "android.database.DefaultDatabaseErrorHandler.constructor()"
      - "android.hardware.display.DisplayManager.getDisplay(kotlin.Int)"
      - "android.net.ConnectivityManager.NetworkCallback.onCapabilitiesChanged(android.net.Network, android.net.NetworkCapabilities)"
      - "android.net.ConnectivityManager.NetworkCallback.onLost(android.net.Network)"
      - "android.net.ConnectivityManager.getNetworkCapabilities(android.net.Network?)"
      - "android.net.NetworkCapabilities.hasTransport(kotlin.Int)"
      - "android.os.BatteryManager.getIntProperty(kotlin.Int)"
      - "android.os.Bundle.get(kotlin.String?)"
      - "android.os.Bundle.getString(kotlin.String?)"
      - "android.os.Bundle.keySet()"
      - "android.os.Handler.constructor(android.os.Looper)"
      - "android.os.Handler.post(java.lang.Runnable)"
      - "android.os.Handler.postDelayed(java.lang.Runnable, kotlin.Long)"
      - "android.os.Handler.removeCallbacks(java.lang.Runnable)"
      - "android.os.Handler.removeCallbacksAndMessages(kotlin.Any?)"
      - "android.os.LocaleList.get(kotlin.Int)"
      - "android.os.LocaleList.size()"
      - "android.os.Looper.getMainLooper()"
      - "android.os.Looper.setMessageLogging(android.util.Printer?)"
      - "android.os.Process.getStartElapsedRealtime()"
      - "android.os.Process.myPid()"
      - "android.os.SystemClock.elapsedRealtime()"
      - "android.os.SystemClock.elapsedRealtimeNanos()"
      - "android.os.StrictMode.allowThreadDiskReads()"
      - "android.os.StrictMode.allowThreadDiskWrites()"
      - "android.os.StrictMode.setThreadPolicy(android.os.StrictMode.ThreadPolicy?)"
      - "android.os.SystemClock.elapsedRealtime()"
      - "android.provider.Settings.Global.getUriFor(kotlin.String?)"
      - "android.provider.Settings.Secure.getUriFor(kotlin.String?)"
      - "android.provider.Settings.System.getUriFor(kotlin.String?)"
      - "android.util.Log.e(kotlin.String?, kotlin.String)"
      - "android.util.Log.e(kotlin.String?, kotlin.String?, kotlin.Throwable?)"
      - "android.util.Log.getStackTraceString(kotlin.Throwable?)"
      - "android.util.Log.i(kotlin.String?, kotlin.String)"
      - "android.util.Log.w(kotlin.String?, kotlin.String)"
      - "android.util.TypedValue.constructor()"
      - "android.view.accessibility.AccessibilityManager.addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener)"
      - "android.view.accessibility.AccessibilityManager.removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener)"
      - "android.view.accessibility.TouchExplorationStateChangeListener(kotlin.Function1)"
      - "android.view.Choreographer.postFrameCallback(android.view.Choreographer.FrameCallback)"
      - "android.view.Display.getSize(android.graphics.Point?)"
      - "android.view.FrameMetrics.getMetric(kotlin.Int)"
      - "android.view.GestureDetector.constructor(android.content.Context?, android.view.GestureDetector.OnGestureListener)"
      - "android.view.GestureDetector.onTouchEvent(android.view.MotionEvent)"
      - "android.view.MotionEvent.PointerCoords.constructor()"
      - "android.view.MotionEvent.getPointerCoords(kotlin.Int, android.view.MotionEvent.PointerCoords)"
      - "android.view.MotionEvent.getPointerId(kotlin.Int)"
      - "android.view.MotionEvent.getRawX(kotlin.Int)"
      - "android.view.MotionEvent.getRawY(kotlin.Int)"
      - "android.view.MotionEvent.recycle()"
      - "android.view.View.getChildAt(kotlin.Int)"
      - "android.view.View.getTag(kotlin.Int)"
      - "android.view.View.hashCode()"
      - "android.view.View.post(java.lang.Runnable?)"
      - "android.view.View.takeIf(kotlin.Function1)"
      - "android.view.View.setTag(kotlin.Int, kotlin.Any?)"
      - "android.view.ViewGroup.findViewById(kotlin.Int)"
      - "android.view.ViewGroup.getChildAt(kotlin.Int)"
      - "android.view.ViewTreeObserver.OnDrawListener.onDraw()"
      - "android.view.ViewTreeObserver.addOnGlobalLayoutListener()"
      - "android.view.ViewTreeObserver.addOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)"
      - "android.view.ViewTreeObserver.removeOnGlobalLayoutListener()"
      - "android.view.ViewTreeObserver.removeOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)"
      - "android.view.Window.Callback.dispatchKeyEvent(android.view.KeyEvent?)"
      - "android.view.Window.Callback.dispatchTouchEvent(android.view.MotionEvent?)"
      - "android.view.Window.Callback.onMenuItemSelected(kotlin.Int, android.view.MenuItem)"
      - "android.view.Window.peekDecorView()"
      - "android.view.inspector.WindowInspector.getGlobalWindowViews()"
      - "androidx.collection.LruCache.maxSize()"
      - "androidx.collection.LruCache.size()"
      - "androidx.collection.LruCache.hitCount()"
      - "androidx.collection.LruCache.missCount()"
      # endregion
      # region Android Webview APIs
      - "android.webkit.ConsoleMessage.MessageLevel.toLogLevel()"
      - "android.webkit.ConsoleMessage.lineNumber()"
      - "android.webkit.ConsoleMessage.message()"
      - "android.webkit.ConsoleMessage.messageLevel()"
      - "android.webkit.ConsoleMessage.sourceId()"
      - "android.webkit.MimeTypeMap.getMimeTypeFromExtension(kotlin.String?)"
      - "android.webkit.MimeTypeMap.getSingleton()"
      - "android.webkit.WebView.addJavascriptInterface(kotlin.Any, kotlin.String)"
      - "android.webkit.WebViewClient.onPageFinished(android.webkit.WebView, kotlin.String)"
      - "android.webkit.WebViewClient.onPageStarted(android.webkit.WebView, kotlin.String, android.graphics.Bitmap)"
      - "android.webkit.WebViewClient.onReceivedError(android.webkit.WebView, android.webkit.WebResourceRequest, android.webkit.WebResourceError)"
      - "android.webkit.WebViewClient.onReceivedError(android.webkit.WebView, kotlin.Int, kotlin.String, kotlin.String)"
      - "android.webkit.WebViewClient.onReceivedHttpError(android.webkit.WebView, android.webkit.WebResourceRequest, android.webkit.WebResourceResponse)"
      - "android.webkit.WebViewClient.onReceivedSslError(android.webkit.WebView, android.webkit.SslErrorHandler, android.net.http.SslError)"
      # endregion
      # region Android View APIs
      - "android.widget.FrameLayout.LayoutParams.constructor(kotlin.Int, kotlin.Int)"
      - "android.widget.FrameLayout.removeView(android.view.View?)"
      - "android.widget.ImageView.getScaleType()"
      - "android.widget.LinearLayout.constructor(android.content.Context?)"
      - "android.widget.LinearLayout.post(java.lang.Runnable?)"
      - "android.widget.LinearLayout.removeAllViews()"
      - "android.widget.TextView.constructor(android.content.Context?)"
      - "android.widget.TextView.setBackgroundColor(kotlin.Int)"
      - "android.widget.TextView.setPadding(kotlin.Int)"
      - "android.widget.TextView.setPadding(kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int)"
      - "android.widget.TextView.setTextColor(kotlin.Int)"
      # endregion
      # region Android Graphics
      - "android.graphics.Bitmap.recycle()"
      - "android.graphics.Canvas.drawColor(kotlin.Int)"
      - "android.graphics.Canvas.drawColor(kotlin.Int, android.graphics.PorterDuff.Mode)"
      - "android.graphics.Color.argb(kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int)"
      - "android.graphics.Color.blue(kotlin.Int)"
      - "android.graphics.Color.green(kotlin.Int)"
      - "android.graphics.Color.red(kotlin.Int)"
      - "android.graphics.Color.rgb(kotlin.Int, kotlin.Int, kotlin.Int)"
      - "android.graphics.drawable.Drawable.draw(android.graphics.Canvas)"
      - "android.graphics.drawable.Drawable.ConstantState.newDrawable(android.content.res.Resources?)"
      - "android.graphics.drawable.Drawable.getDrawable(kotlin.Int)"
      - "android.graphics.drawable.Drawable.getPadding(android.graphics.Rect)"
      - "android.graphics.drawable.Drawable.resolveShapeStyleAndBorder(kotlin.Float)"
      - "android.graphics.drawable.Drawable.setBounds(kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int)"
      - "android.graphics.drawable.Drawable.setState(kotlin.IntArray)"
      - "android.graphics.drawable.Drawable.setTintList(android.content.res.ColorStateList?)"
      - "android.graphics.drawable.RippleDrawable.findIndexByLayerId(kotlin.Int)"
      - "android.graphics.drawable.DrawableContainer.DrawableContainerState.getChild(kotlin.Int)"
      - "android.graphics.Matrix.constructor()"
      - "android.graphics.Matrix.preScale(kotlin.Float, kotlin.Float)"
      - "android.graphics.Matrix.preTranslate(kotlin.Float, kotlin.Float)"
      - "android.graphics.Paint.constructor()"
      - "android.graphics.Path.computeBounds(android.graphics.RectF, kotlin.Boolean)"
      - "android.graphics.Path.transform(android.graphics.Matrix)"
      - "android.graphics.PathMeasure.constructor(android.graphics.Path?, kotlin.Boolean)"
      - "android.graphics.PathMeasure.nextContour()"
      - "android.graphics.Point.constructor()"
      - "android.graphics.Point.constructor(kotlin.Int, kotlin.Int)"
      - "android.graphics.Rect.centerX()"
      - "android.graphics.Rect.centerY()"
      - "android.graphics.Rect.constructor()"
      - "android.graphics.Rect.constructor(kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int)"
      - "android.graphics.Rect.height()"
      - "android.graphics.Rect.width()"
      - "android.graphics.RectF.constructor()"
      - "android.graphics.RectF.width()"
      - "android.graphics.RectF.height()"
      - "android.graphics.RectF.toRect()"
      # endregion
      # region Androidx APIs
      - "androidx.appcompat.widget.DatadogActionBarContainerAccessor.constructor(androidx.appcompat.widget.ActionBarContainer)"
      - "androidx.appcompat.widget.DatadogActionBarContainerAccessor.getBackgroundDrawable()"
      - "androidx.compose.foundation.interaction.DragInteraction.Start.constructor()"
      - "androidx.compose.foundation.shape.CornerSize.toPx(androidx.compose.ui.geometry.Size, androidx.compose.ui.unit.Density)"
      - "androidx.compose.runtime.collection.MutableVector.asMutableList()"
      - "androidx.compose.runtime.Composition.takeIf(kotlin.Function1)"
      - "androidx.compose.runtime.DisposableEffect(kotlin.Any?, kotlin.Any?, kotlin.Function1)"
      - "androidx.compose.runtime.DisposableEffectScope.onDispose(kotlin.Function0)"
      - "androidx.compose.runtime.LaunchedEffect(kotlin.Any?, kotlin.coroutines.SuspendFunction1)"
      - "androidx.compose.runtime.LaunchedEffect(kotlin.Any?, kotlin.Any?, kotlin.Any?, kotlin.coroutines.SuspendFunction1)"
      - "androidx.compose.runtime.remember(kotlin.Any?, kotlin.Any?, kotlin.Function0)"
      - "androidx.compose.runtime.remember(kotlin.Function0)"
      - "androidx.compose.runtime.rememberUpdatedState(com.datadog.android.rum.tracking.ComponentPredicate)"
      - "androidx.compose.runtime.rememberUpdatedState(kotlin.Boolean)"
      - "androidx.compose.runtime.rememberUpdatedState(kotlin.Function0)"
      - "androidx.compose.runtime.tooling.CompositionGroup.parameters(com.datadog.android.sessionreplay.compose.internal.data.ComposeContext)"
      - "androidx.compose.runtime.tooling.CompositionGroup.stableId()"
      - "androidx.compose.ui.graphics.Color(kotlin.Long)"
      - "androidx.compose.ui.graphics.Color.toArgb()"
      - "androidx.compose.ui.graphics.Matrix.constructor(kotlin.FloatArray)"
      - "androidx.compose.ui.graphics.Matrix.scale(kotlin.Float, kotlin.Float, kotlin.Float)"
      - "androidx.compose.ui.graphics.Matrix.translate(kotlin.Float, kotlin.Float, kotlin.Float)"
      - "androidx.compose.ui.graphics.Path.getBounds()"
      - "androidx.compose.ui.graphics.Path.transform(androidx.compose.ui.graphics.Matrix)"
      - "androidx.compose.ui.layout.LayoutCoordinates.positionInWindow()"
      - "androidx.compose.ui.layout.LayoutInfo.getModifierInfo()"
      - "androidx.compose.ui.unit.Density(kotlin.Float, kotlin.Float)"
      - "androidx.compose.ui.geometry.Rect.toAndroidRectF()"
      - "androidx.compose.ui.geometry.Size(kotlin.Float, kotlin.Float)"
      - "androidx.compose.ui.geometry.Size.copy(kotlin.Float, kotlin.Float)"
      - "androidx.compose.ui.layout.LayoutCoordinates.boundsInWindow()"
      - "androidx.compose.ui.semantics.SemanticsConfiguration.firstOrNull(kotlin.Function1)"
      - "androidx.compose.ui.Modifier.semantics(kotlin.Boolean, kotlin.Function1)"
      - "androidx.compose.ui.node.LayoutNode.getModifierInfo()"
      - "androidx.compose.ui.semantics.SemanticsConfiguration.contains(androidx.compose.ui.semantics.SemanticsPropertyKey)"
      - "androidx.compose.ui.semantics.SemanticsConfiguration.getOrNull(androidx.compose.ui.semantics.SemanticsPropertyKey)"
      - "androidx.compose.ui.semantics.SemanticsPropertyKey.constructor(kotlin.String, kotlin.Function2)"
      - "androidx.compose.ui.text.AnnotatedString.getStringAnnotations(kotlin.Int, kotlin.Int)"
      - "android.content.ContentResolver.registerContentObserver(android.net.Uri, kotlin.Boolean, android.database.ContentObserver)"
      - "android.content.ContentResolver.unregisterContentObserver(android.database.ContentObserver)"
      - "androidx.core.view.GestureDetectorCompat.constructor(android.content.Context, android.view.GestureDetector.OnGestureListener)"
      - "androidx.core.view.GestureDetectorCompat.onTouchEvent(android.view.MotionEvent)"
      - "androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentActivityCreated(androidx.fragment.app.FragmentManager, androidx.fragment.app.Fragment, android.os.Bundle?)"
      - "androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentAttached(androidx.fragment.app.FragmentManager, androidx.fragment.app.Fragment, android.content.Context)"
      - "androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentDestroyed(androidx.fragment.app.FragmentManager, androidx.fragment.app.Fragment)"
      - "androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentPaused(androidx.fragment.app.FragmentManager, androidx.fragment.app.Fragment)"
      - "androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentResumed(androidx.fragment.app.FragmentManager, androidx.fragment.app.Fragment)"
      - "androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentStarted(androidx.fragment.app.FragmentManager, androidx.fragment.app.Fragment)"
      - "androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentStopped(androidx.fragment.app.FragmentManager, androidx.fragment.app.Fragment)"
      - "androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentViewCreated(androidx.fragment.app.FragmentManager, androidx.fragment.app.Fragment, android.view.View, android.os.Bundle?)"
      - "androidx.fragment.app.FragmentManager.findFragmentById(kotlin.Int)"
      - "androidx.fragment.app.FragmentManager.registerFragmentLifecycleCallbacks(androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks, kotlin.Boolean)"
      - "androidx.fragment.app.FragmentManager.unregisterFragmentLifecycleCallbacks(androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks)"
      - "androidx.lifecycle.Lifecycle.addObserver(androidx.lifecycle.LifecycleObserver)"
      - "androidx.lifecycle.Lifecycle.removeObserver(androidx.lifecycle.LifecycleObserver)"
      - "androidx.navigation.NavController.addOnDestinationChangedListener(androidx.navigation.NavController.OnDestinationChangedListener)"
      - "androidx.navigation.NavController.removeOnDestinationChangedListener(androidx.navigation.NavController.OnDestinationChangedListener)"
      - "androidx.recyclerview.widget.RecyclerView.findContainingViewHolder(android.view.View)"
      - "androidx.recyclerview.widget.RecyclerView.getChildAdapterPosition(android.view.View)"
      - "androidx.work.Constraints.Builder()"
      - "androidx.work.Constraints.Builder.build()"
      - "androidx.work.Constraints.Builder.constructor()"
      - "androidx.work.Constraints.Builder.setRequiredNetworkType(androidx.work.NetworkType)"
      - "androidx.work.Data.Builder.constructor()"
      - "androidx.work.Data.Builder.putString(kotlin.String, kotlin.String?)"
      - "androidx.work.Data.getString(kotlin.String)"
      - "androidx.work.ListenableWorker.Result.success()"
      - "androidx.work.OneTimeWorkRequest.Builder(java.lang.Class)"
      - "androidx.work.OneTimeWorkRequest.Builder.addTag(kotlin.String)"
      - "androidx.work.OneTimeWorkRequest.Builder.build()"
      - "androidx.work.OneTimeWorkRequest.Builder.constructor(java.lang.Class)"
      - "androidx.work.OneTimeWorkRequest.Builder.setConstraints(androidx.work.Constraints)"
      - "androidx.work.OneTimeWorkRequest.Builder.setInitialDelay(kotlin.Long, java.util.concurrent.TimeUnit)"
      - "androidx.work.OneTimeWorkRequest.Builder.setInputData(androidx.work.Data)"
      - "androidx.work.WorkManager.cancelAllWorkByTag(kotlin.String)"
      - "androidx.work.WorkManager.getInstance(android.content.Context)"
      - "androidx.work.WorkManager.isInitialized()"
      # endregion
      # region Google Material
      - "com.google.android.material.tabs.TabLayout.TabView.getChildAt(kotlin.Int)"
      # endregion
      # region Glide
      - "com.bumptech.glide.GlideBuilder.setDiskCacheExecutor(com.bumptech.glide.load.engine.executor.GlideExecutor?)"
      - "com.bumptech.glide.GlideBuilder.setSourceExecutor(com.bumptech.glide.load.engine.executor.GlideExecutor?)"
      - "com.bumptech.glide.Registry.replace(java.lang.Class, java.lang.Class, com.bumptech.glide.load.model.ModelLoaderFactory)"
      - "com.bumptech.glide.integration.okhttp3.OkHttpUrlLoader.Factory.constructor(okhttp3.Call.Factory)"
      - "com.bumptech.glide.load.engine.executor.GlideExecutor.Builder.build()"
      - "com.bumptech.glide.load.engine.executor.GlideExecutor.Builder.setUncaughtThrowableStrategy(com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy)"
      - "com.bumptech.glide.load.engine.executor.newDiskCacheBuilder()"
      - "com.bumptech.glide.load.engine.executor.newSourceBuilder()"
      # endregion
      # region Gson
      - "com.google.gson.JsonArray.add(com.google.gson.JsonElement?)"
      - "com.google.gson.JsonArray.add(kotlin.String?)"
      - "com.google.gson.JsonArray.addAll(com.google.gson.JsonArray?)"
      - "com.google.gson.JsonArray.any(kotlin.Function1)"
      - "com.google.gson.JsonArray.asSequence()"
      - "com.google.gson.JsonArray.constructor()"
      - "com.google.gson.JsonArray.constructor(kotlin.Int)"
      - "com.google.gson.JsonArray.firstOrNull()"
      - "com.google.gson.JsonArray.firstOrNull(kotlin.Function1)"
      - "com.google.gson.JsonArray.lastOrNull()"
      - "com.google.gson.JsonArray.map(kotlin.Function1)"
      - "com.google.gson.JsonArray.size()"
      - "com.google.gson.JsonObject.add(kotlin.String?, com.google.gson.JsonElement?)"
      - "com.google.gson.JsonObject.addProperty(kotlin.String?, kotlin.Boolean?)"
      - "com.google.gson.JsonObject.addProperty(kotlin.String?, kotlin.Number?)"
      - "com.google.gson.JsonObject.addProperty(kotlin.String?, kotlin.String?)"
      - "com.google.gson.JsonObject.constructor()"
      - "com.google.gson.JsonObject.entrySet()"
      - "com.google.gson.JsonObject.get(kotlin.String?)"
      - "com.google.gson.JsonObject.getAsJsonObject(kotlin.String?)"
      - "com.google.gson.JsonObject.getAsJsonPrimitive(kotlin.String?)"
      - "com.google.gson.JsonObject.has(kotlin.String?)"
      - "com.google.gson.JsonObject.remove(kotlin.String?)"
      - "com.google.gson.JsonObject.toString()"
      - "com.google.gson.JsonParseException.constructor(kotlin.String?)"
      - "com.google.gson.JsonParseException.constructor(kotlin.String?, kotlin.Throwable?)"
      - "com.google.gson.JsonParseException.constructor(kotlin.Throwable)"
      - "com.google.gson.JsonPrimitive.constructor(kotlin.Boolean?)"
      - "com.google.gson.JsonPrimitive.constructor(kotlin.Number?)"
      - "com.google.gson.JsonPrimitive.constructor(kotlin.String?)"
      # endregion
      # region Java Collections
      - "java.util.ArrayList.forEach(kotlin.Function1)"
      - "java.util.HashSet.add(kotlin.String)"
      - "java.util.HashSet.clear()"
      - "java.util.LinkedList.add(kotlin.Any?)"
      - "java.util.HashSet.remove(kotlin.String)"
      - "java.util.LinkedList.add(android.view.View)"
      - "java.util.LinkedList.add(com.datadog.android.privacy.TrackingConsentProviderCallback)"
      - "java.util.LinkedList.add(com.datadog.android.sessionreplay.internal.recorder.Node)"
      - "java.util.LinkedList.add(com.datadog.android.sessionreplay.model.MobileSegment.Add)"
      - "java.util.LinkedList.add(com.datadog.android.sessionreplay.model.MobileSegment.Remove)"
      - "java.util.LinkedList.add(com.datadog.android.sessionreplay.model.MobileSegment.Wireframe)"
      - "java.util.LinkedList.add(com.datadog.android.sessionreplay.model.MobileSegment.WireframeUpdateMutation)"
      - "java.util.LinkedList.add(com.datadog.android.sessionreplay.recorder.Node)"
      - "java.util.LinkedList.add(kotlin.Pair)"
      - "java.util.LinkedList.addAll(kotlin.collections.Collection)"
      - "java.util.LinkedList.addAll(kotlin.Int, kotlin.collections.Collection)"
      - "java.util.LinkedList.addFirst(android.view.View?)"
      - "java.util.LinkedList.addFirst(com.datadog.android.webview.internal.rum.domain.WebViewNativeRumViewsCache.ViewEntry?)"
      - "java.util.LinkedList.clear()"
      - "java.util.LinkedList.constructor()"
      - "java.util.LinkedList.constructor(kotlin.collections.MutableCollection?)"
      - "java.util.LinkedList.firstOrNull(kotlin.Function1)"
      - "java.util.LinkedList.forEach(kotlin.Function1)"
      - "java.util.LinkedList.isEmpty()"
      - "java.util.LinkedList.isNotEmpty()"
      - "java.util.LinkedList.iterator()"
      - "java.util.LinkedList.peekLast()"
      - "java.util.LinkedList.poll()"
      - "java.util.LinkedList.remove(com.datadog.android.privacy.TrackingConsentProviderCallback)"
      - "java.util.LinkedList.remove(com.datadog.android.webview.internal.rum.domain.WebViewNativeRumViewsCache.ViewEntry)"
      - "java.util.LinkedHashMap.remove(kotlin.String)"
      - "java.util.Queue.addAll(kotlin.collections.Collection)"
      - "java.util.Queue.clear()"
      - "java.util.Queue.lastOrNull()"
      - "java.util.Queue.map(kotlin.Function1)"
      - "java.util.Stack.constructor()"
      - "java.util.Stack.isNotEmpty()"
      - "java.util.Stack.pop()"
      - "java.util.Stack.push(com.datadog.android.sessionreplay.internal.recorder.Node?)"
      - "java.util.stream.IntStream.forEach(java.util.function.IntConsumer?)"
      # endregion
      # region Java Concurrency
      - "java.lang.Runnable(kotlin.Function0)"
      - "java.lang.Thread.State.asString()"
      - "java.lang.Thread.UncaughtExceptionHandler.uncaughtException(java.lang.Thread?, kotlin.Throwable?)"
      - "java.lang.Thread.currentThread()"
      - "java.lang.Thread.getDefaultUncaughtExceptionHandler()"
      - "java.lang.Thread.interrupted()"
      - "java.lang.Thread.setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler?)"
      - "java.lang.Thread.threadId()"
      - "java.util.Collections.synchronizedSet(kotlin.collections.MutableSet?)"
      - "java.util.Queue.isEmpty()"
      - "java.util.Queue.isNotEmpty()"
      - "java.util.Queue.poll()"
      - "java.util.concurrent.ConcurrentHashMap.constructor()"
      - "java.util.concurrent.ConcurrentHashMap.getOrPut(kotlin.String?, kotlin.Function0)"
      - "java.util.concurrent.ConcurrentHashMap.putIfAbsent(kotlin.String, com.datadog.android.rum.internal.metric.slowframes.DefaultUISlownessMetricDispatcher.SlowFramesTelemetry)"
      - "java.util.concurrent.ConcurrentHashMap.remove(kotlin.String)"
      - "java.util.concurrent.ConcurrentLinkedQueue.constructor()"
      - "java.util.concurrent.ConcurrentLinkedQueue.isEmpty()"
      - "java.util.concurrent.ConcurrentLinkedQueue.isNotEmpty()"
      - "java.util.concurrent.ConcurrentLinkedQueue.peek()"
      - "java.util.concurrent.ConcurrentLinkedQueue.poll()"
      - "java.util.concurrent.CopyOnWriteArraySet.add(kotlin.String?)"
      - "java.util.concurrent.CopyOnWriteArraySet.constructor()"
      - "java.util.concurrent.CopyOnWriteArraySet.remove(kotlin.String?)"
      - "java.util.concurrent.CopyOnWriteArraySet.toTypedArray()"
      - "java.util.concurrent.CountDownLatch.countDown()"
      - "java.util.concurrent.ExecutorService.shutdown()"
      - "java.util.concurrent.ExecutorService.shutdownNow()"
      - "java.util.concurrent.Executors.newSingleThreadExecutor()"
      - "java.util.concurrent.LinkedBlockingDeque.constructor()"
      - "java.util.concurrent.RejectedExecutionHandler(kotlin.Function2)"
      - "java.util.concurrent.ScheduledExecutorService.shutdownNow()"
      - "java.util.concurrent.ScheduledThreadPoolExecutor.afterExecute(java.lang.Runnable?, kotlin.Throwable?)"
      - "java.util.concurrent.ScheduledThreadPoolExecutor.remove(java.lang.Runnable?)"
      - "java.util.concurrent.ScheduledThreadPoolExecutor.shutdown()"
      - "java.util.concurrent.ScheduledThreadPoolExecutor.shutdownNow()"
      - "java.util.concurrent.ThreadPoolExecutor.afterExecute(java.lang.Runnable?, kotlin.Throwable?)"
      - "java.util.concurrent.TimeUnit.HOURS.toMillis(kotlin.Long)"
      - "java.util.concurrent.TimeUnit.HOURS.toNanos(kotlin.Long)"
      - "java.util.concurrent.TimeUnit.MICROSECONDS.toMillis(kotlin.Long)"
      - "java.util.concurrent.TimeUnit.MILLISECONDS.toNanos(kotlin.Long)"
      - "java.util.concurrent.TimeUnit.MINUTES.toMillis(kotlin.Long)"
      - "java.util.concurrent.TimeUnit.MINUTES.toNanos(kotlin.Long)"
      - "java.util.concurrent.TimeUnit.NANOSECONDS.toMillis(kotlin.Long)"
      - "java.util.concurrent.TimeUnit.SECONDS.toMillis(kotlin.Long)"
      - "java.util.concurrent.TimeUnit.SECONDS.toNanos(kotlin.Long)"
      - "java.util.concurrent.atomic.AtomicBoolean.compareAndSet(kotlin.Boolean, kotlin.Boolean)"
      - "java.util.concurrent.atomic.AtomicBoolean.constructor(kotlin.Boolean)"
      - "java.util.concurrent.atomic.AtomicBoolean.get()"
      - "java.util.concurrent.atomic.AtomicBoolean.getAndSet(kotlin.Boolean)"
      - "java.util.concurrent.atomic.AtomicBoolean.set(kotlin.Boolean)"
      - "java.util.concurrent.atomic.AtomicInteger.constructor(kotlin.Int)"
      - "java.util.concurrent.atomic.AtomicInteger.decrementAndGet()"
      - "java.util.concurrent.atomic.AtomicInteger.get()"
      - "java.util.concurrent.atomic.AtomicInteger.getAndIncrement()"
      - "java.util.concurrent.atomic.AtomicInteger.incrementAndGet()"
      - "java.util.concurrent.atomic.AtomicInteger.set(kotlin.Int)"
      - "java.util.concurrent.atomic.AtomicLong.compareAndSet(kotlin.Long, kotlin.Long)"
      - "java.util.concurrent.atomic.AtomicLong.constructor(kotlin.Long)"
      - "java.util.concurrent.atomic.AtomicLong.get()"
      - "java.util.concurrent.atomic.AtomicLong.set(kotlin.Long)"
      - "java.util.concurrent.atomic.AtomicReference.compareAndSet(com.datadog.android.api.SdkCore?, com.datadog.android.api.SdkCore?)"
      - "java.util.concurrent.atomic.AtomicReference.compareAndSet(io.opentracing.Tracer?, io.opentracing.Tracer?)"
      - "java.util.concurrent.atomic.AtomicReference.constructor()"
      - "java.util.concurrent.atomic.AtomicReference.constructor(android.app.Application.ActivityLifecycleCallbacks?)"
      - "java.util.concurrent.atomic.AtomicReference.constructor(com.datadog.android.api.SdkCore?)"
      - "java.util.concurrent.atomic.AtomicReference.constructor(com.datadog.android.api.feature.FeatureEventReceiver?)"
      - "java.util.concurrent.atomic.AtomicReference.constructor(com.datadog.android.rum.internal.domain.RumContext?)"
      - "java.util.concurrent.atomic.AtomicReference.constructor(kotlin.String?)"
      - "java.util.concurrent.atomic.AtomicReference.get()"
      - "java.util.concurrent.atomic.AtomicReference.set(android.app.Application.ActivityLifecycleCallbacks?)"
      - "java.util.concurrent.atomic.AtomicReference.set(com.datadog.android.api.FeatureEventReceiver?)"
      - "java.util.concurrent.atomic.AtomicReference.set(com.datadog.android.api.SdkCore?)"
      - "java.util.concurrent.atomic.AtomicReference.set(com.datadog.android.api.feature.FeatureEventReceiver?)"
      - "java.util.concurrent.atomic.AtomicReference.set(com.datadog.android.rum.internal.domain.RumContext?)"
      - "java.util.concurrent.atomic.AtomicReference.set(io.opentracing.Tracer?)"
      - "java.util.concurrent.atomic.AtomicReference.set(kotlin.Nothing?)"
      - "java.util.concurrent.atomic.AtomicReference.set(kotlin.String?)"
      - "java.util.concurrent.LinkedBlockingQueue.toArray()"
      # endregion
      # region Java I/O
      - "java.io.BufferedReader.readText()"
      - "java.io.BufferedReader.use(kotlin.Function1)"
      - "java.io.ByteArrayOutputStream.constructor()"
      - "java.io.ByteArrayOutputStream.constructor(kotlin.Int)"
      - "java.io.ByteArrayOutputStream.size()"
      - "java.io.ByteArrayOutputStream.toByteArray()"
      - "java.io.ByteArrayOutputStream.use(kotlin.Function1)"
      - "java.io.File.constructor(java.io.File?, kotlin.String?)"
      - "java.io.File.constructor(kotlin.String?)"
      - "java.io.InputStream.bufferedReader(java.nio.charset.Charset)"
      - "java.io.InputStream.mark(kotlin.Int)"
      - "java.io.InputStream.markSupported()"
      - "java.io.InputStream.reader(java.nio.charset.Charset)"
      - "java.io.StringWriter.constructor()"
      - "java.io.close()"
      # endregion
      # region Java misc
      - "java.lang.Character.isWhitespace(kotlin.Int)"
      - "java.lang.Class.hashCode()"
      - "java.lang.Class.isInstance(kotlin.Any?)"
      - "java.lang.Class.getDeclaredFieldSafe(kotlin.String)"
      - "java.lang.IllegalArgumentException.constructor(kotlin.String)"
      - "java.lang.IllegalStateException.constructor(kotlin.String)"
      - "java.lang.IllegalStateException.constructor(kotlin.String?)"
      - "java.lang.Object.constructor()"
      - "java.lang.Runtime.availableProcessors()"
      - "java.lang.Runtime.getRuntime()"
      - "java.lang.Runtime.maxMemory()"
      - "java.lang.StringBuilder.append(kotlin.Char)"
      - "java.lang.StringBuilder.append(kotlin.CharArray?)"
      - "java.lang.StringBuilder.append(kotlin.String?)"
      - "java.lang.StringBuilder.constructor()"
      - "java.lang.StringBuilder.isNotEmpty()"
      - "java.lang.System.currentTimeMillis()"
      - "java.lang.System.getProperty(kotlin.String?)"
      - "java.lang.System.identityHashCode(kotlin.Any?)"
      - "java.lang.System.nanoTime()"
      - "java.lang.ref.Reference.get()"
      - "java.lang.ref.WeakReference.clear()"
      - "java.lang.ref.WeakReference.constructor(android.app.Activity?)"
      - "java.lang.ref.WeakReference.constructor(android.content.Context?)"
      - "java.lang.ref.WeakReference.constructor(android.view.View?)"
      - "java.lang.ref.WeakReference.constructor(android.view.Window?)"
      - "java.lang.ref.WeakReference.constructor(com.datadog.android.api.SdkCore?)"
      - "java.lang.ref.WeakReference.constructor(com.datadog.android.rum.tracking.ViewTarget?)"
      - "java.lang.ref.WeakReference.constructor(kotlin.Any?)"
      - "java.lang.ref.WeakReference.constructor(kotlin.Nothing?)"
      - "java.lang.ref.WeakReference.constructor(kotlin.String?)"
      - "java.lang.ref.WeakReference.get()"
      - "java.lang.reflect.Field.getSafe(kotlin.Any?)"
      - "java.lang.reflect.Field.accessible()"
      - "java.lang.StringBuilder.append(kotlin.Char)"
      - "java.lang.StringBuilder.append(kotlin.CharArray?)"
      - "java.lang.StringBuilder.append(kotlin.String?)"
      - "java.lang.StringBuilder.clear()"
      - "java.lang.StringBuilder.constructor()"
      - "java.math.BigInteger.toHexString()"
      - "java.math.BigInteger.toLong()"
      - "java.nio.charset.Charset.defaultCharset()"
      - "java.security.MessageDigest.digest()"
      - "java.security.MessageDigest.update(kotlin.ByteArray?)"
      - "java.security.SecureRandom.constructor()"
      - "java.security.SecureRandom.nextFloat()"
      - "java.security.SecureRandom.nextInt()"
      - "java.security.SecureRandom.nextLong()"
      - "java.util.HashMap.clear()"
      - "java.util.HashSet.addAll(kotlin.collections.Collection)"
      - "java.util.HashSet.find(kotlin.Function1)"
      - "java.util.Locale.getDefault()"
      - "java.util.Locale.toLanguageTag()"
      - "java.util.Properties.constructor()"
      - "java.util.Properties.setProperty(kotlin.String?, kotlin.String?)"
      - "java.util.TimeZone.getDefault()"
      - "java.util.UUID.constructor(kotlin.Long, kotlin.Long)"
      - "java.util.UUID.randomUUID()"
      - "java.util.WeakHashMap.clear()"
      - "java.util.WeakHashMap.constructor()"
      - "java.util.WeakHashMap.containsKey(android.view.Window?)"
      - "java.util.WeakHashMap.remove(android.app.Activity?)"
      - "java.util.WeakHashMap.remove(android.view.View?)"
      - "java.util.WeakHashMap.remove(android.view.Window?)"
      - "java.util.concurrent.ExecutionException.constructor(kotlin.String?, kotlin.Throwable?)"
      # endregion
      # region Java Zip
      - "java.util.zip.Deflater.constructor(kotlin.Int)"
      - "java.util.zip.Deflater.end()"
      - "java.util.zip.Deflater.finish()"
      - "java.util.zip.Deflater.reset()"
      - "java.util.zip.Deflater.setInput(kotlin.ByteArray?)"
      # endregion
      # region Kotlin Stdlib
      - "kotlin.lazy(kotlin.Function0)"
      - "kotlin.lazy(kotlin.LazyThreadSafetyMode, kotlin.Function0)"
      - "kotlin.repeat(kotlin.Int, kotlin.Function1)"
      - "kotlin.synchronized(kotlin.Any, kotlin.Function0)"
      - "kotlin.ReplaceWith.constructor(kotlin.String, kotlin.Array)"
      # endregion
      # region Kotlin Collections
      - "kotlin.Array.all(kotlin.Function1)"
      - "kotlin.Array.associateWith(kotlin.Function1)"
      - "kotlin.Array.associateBy(kotlin.Function1)"
      - "kotlin.Array.constructor(kotlin.Int, kotlin.Function1)"
      - "kotlin.Array.contentEquals(kotlin.Array?)"
      - "kotlin.Array.contentHashCode()"
      - "kotlin.Array.count(kotlin.Function1)"
      - "kotlin.Array.filter(kotlin.Function1)"
      - "kotlin.Array.filterNotNull(kotlin.Function1)"
      - "kotlin.Array.first(kotlin.Function1)"
      - "kotlin.Array.firstOrNull(kotlin.Function1)"
      - "kotlin.Array.forEach(kotlin.Function1)"
      - "kotlin.Array.forEachIndexed(kotlin.Function2)"
      - "kotlin.Array.isNotEmpty()"
      - "kotlin.Array.joinToString(kotlin.CharSequence, kotlin.CharSequence, kotlin.CharSequence, kotlin.Int, kotlin.CharSequence, kotlin.Function1?)"
      - "kotlin.Array.none(kotlin.Function1)"
      - "kotlin.Array.orEmpty()"
      - "kotlin.Array.sorted()"
      - "kotlin.Array.toList()"
      - "kotlin.byteArrayOf(kotlin.ByteArray)"
      - "kotlin.ByteArray.any(kotlin.Function1)"
      - "kotlin.ByteArray.contentEquals(kotlin.ByteArray?)"
      - "kotlin.ByteArray.contentHashCode()"
      - "kotlin.ByteArray.indexOf(kotlin.Byte, kotlin.Int)"
      - "kotlin.ByteArray.isEmpty()"
      - "kotlin.ByteArray.isNotEmpty()"
      - "kotlin.ByteArray.joinToString(kotlin.CharSequence, kotlin.CharSequence, kotlin.CharSequence, kotlin.Int, kotlin.CharSequence, kotlin.Function1?)"
      - "kotlin.arrayOf(kotlin.Array)"
      - "kotlin.collections.arrayListOf()"
      - "kotlin.collections.ArrayList(kotlin.collections.MutableCollection?)"
      - "kotlin.collections.buildMap(kotlin.Function1)"
      - "kotlin.collections.Collection.flatten()"
      - "kotlin.collections.Collection.fold(kotlin.collections.MutableSet, kotlin.Function2)"
      - "kotlin.collections.Collection.forEach(kotlin.Function1)"
      - "kotlin.collections.Collection.isNotEmpty()"
      - "kotlin.collections.Collection.sumOf(kotlin.Function1)"
      - "kotlin.collections.Collection.withIndex()"
      - "kotlin.collections.HashMap()"
      - "kotlin.collections.HashSet()"
      - "kotlin.collections.HashSet(kotlin.collections.MutableCollection?)"
      - "kotlin.collections.Iterable.any(kotlin.Function1)"
      - "kotlin.collections.Iterable.asSequence()"
      - "kotlin.collections.Iterable.firstOrNull(kotlin.Function1)"
      - "kotlin.collections.Iterable.forEach(kotlin.Function1)"
      - "kotlin.collections.Iterable.mapNotNull(kotlin.Function1)"
      - "kotlin.collections.Iterable.toJsonArray()"
      - "kotlin.collections.Iterable.toList()"
      - "kotlin.collections.Iterable.toMap(kotlin.collections.MutableMap)"
      - "kotlin.collections.LinkedHashMap()"
      - "kotlin.collections.LinkedHashMap(kotlin.collections.MutableMap?)"
      - "kotlin.collections.List.all(kotlin.Function1)"
      - "kotlin.collections.List.any(kotlin.Function1)"
      - "kotlin.collections.List.asSequence()"
      - "kotlin.collections.List.associate(kotlin.Function1)"
      - "kotlin.collections.List.associateBy(kotlin.Function1)"
      - "kotlin.collections.List.associateWith(kotlin.Function1)"
      - "kotlin.collections.List.contains(kotlin.String)"
      - "kotlin.collections.List.contains(kotlin.String)"
      - "kotlin.collections.List.count()"
      - "kotlin.collections.List.distinct()"
      - "kotlin.collections.List.drop(kotlin.Int)"
      - "kotlin.collections.List.elementAtOrNull(kotlin.Int)"
      - "kotlin.collections.List.filter(kotlin.Function1)"
      - "kotlin.collections.List.filterIndexed(kotlin.Function2)"
      - "kotlin.collections.List.filterNotNull(kotlin.Function1)"
      - "kotlin.collections.List.findFirstForType(java.lang.Class)"
      - "kotlin.collections.List.firstOrNull()"
      - "kotlin.collections.List.firstOrNull(kotlin.Function1)"
      - "kotlin.collections.List.firstNotNullOfOrNull(kotlin.Function1)"
      - "kotlin.collections.List.flatMap(kotlin.Function1)"
      - "kotlin.collections.List.flatMap(kotlin.Function1)"
      - "kotlin.collections.List.fold(com.google.gson.JsonArray, kotlin.Function2)"
      - "kotlin.collections.List.fold(kotlin.Long, kotlin.Function2)"
      - "kotlin.collections.List.fold(kotlin.String?, kotlin.Function2)"
      - "kotlin.collections.List.forEach(java.util.function.Consumer)"
      - "kotlin.collections.List.forEach(java.util.function.Consumer)"
      - "kotlin.collections.List.forEach(kotlin.Function1)"
      - "kotlin.collections.List.forEachIndexed(kotlin.Function2)"
      - "kotlin.collections.List.getOrNull(kotlin.Int)"
      - "kotlin.collections.List.groupBy(kotlin.Function1)"
      - "kotlin.collections.List.hashCode()"
      - "kotlin.collections.List.ifEmpty(kotlin.Function0)"
      - "kotlin.collections.List.isEmpty()"
      - "kotlin.collections.List.isNotEmpty()"
      - "kotlin.collections.List.joinToString(kotlin.CharSequence, kotlin.CharSequence, kotlin.CharSequence, kotlin.Int, kotlin.CharSequence, kotlin.Function1?)"
      - "kotlin.collections.List.lastOrNull()"
      - "kotlin.collections.List.lastOrNull(kotlin.Function1)"
      - "kotlin.collections.List.map(kotlin.Function1)"
      - "kotlin.collections.List.mapIndexed(kotlin.Function2)"
      - "kotlin.collections.List.mapNotNull(kotlin.Function1)"
      - "kotlin.collections.List.maxOrNull()"
      - "kotlin.collections.List.orEmpty()"
      - "kotlin.collections.List.reduceOrNull(kotlin.Function2)"
      - "kotlin.collections.List.reversed()"
      - "kotlin.collections.List.shuffled()"
      - "kotlin.collections.List.sorted()"
      - "kotlin.collections.List.sortedBy(kotlin.Function1)"
      - "kotlin.collections.List.subList(kotlin.Int, kotlin.Int)"
      - "kotlin.collections.List.sumOf(kotlin.Function1)"
      - "kotlin.collections.List.take(kotlin.Int)"
      - "kotlin.collections.List.toCharArray()"
      - "kotlin.collections.List.toList()"
      - "kotlin.collections.List.toMap()"
      - "kotlin.collections.List.toMutableList()"
      - "kotlin.collections.List.toMutableMap()"
      - "kotlin.collections.List.toSet()"
      - "kotlin.collections.List.toTypedArray()"
      - "kotlin.collections.List.withIndex()"
      - "kotlin.collections.Map.asSequence()"
      - "kotlin.collections.Map.containsKey(kotlin.String)"
      - "kotlin.collections.Map.filter(kotlin.Function1)"
      - "kotlin.collections.Map.filterKeys(kotlin.Function1)"
      - "kotlin.collections.Map.filterValues(kotlin.Function1)"
      - "kotlin.collections.Map.forEach(kotlin.Function1)"
      - "kotlin.collections.Map.forEach(kotlin.Function1)" # one of our usage is with <*, *> which doesn't get captured
      - "kotlin.collections.Map.get(kotlin.String)"
      - "kotlin.collections.Map.isEmpty()"
      - "kotlin.collections.Map.isNotEmpty()"
      - "kotlin.collections.Map.isNullOrEmpty()"
      - "kotlin.collections.Map.map(kotlin.Function1)"
      - "kotlin.collections.Map.mapKeys(kotlin.Function1)"
      - "kotlin.collections.Map.mapNotNull(kotlin.Function1)"
      - "kotlin.collections.Map.mapValues(kotlin.Function1)"
      - "kotlin.collections.Map.orEmpty()"
      - "kotlin.collections.Map.toJsonObject()"
      - "kotlin.collections.Map.toMap()"
      - "kotlin.collections.Map.toMap()"
      - "kotlin.collections.Map.toMutableMap()"
      - "kotlin.collections.MutableCollection.flatMap(kotlin.Function1)"
      - "kotlin.collections.MutableCollection.forEach(kotlin.Function1)"
      - "kotlin.collections.MutableCollection.toList()"
      - "kotlin.collections.MutableIterator.hasNext()"
      - "kotlin.collections.MutableList.add(com.datadog.android.api.InternalLogger.Target)"
      - "kotlin.collections.MutableList.add(com.datadog.android.core.internal.persistence.Batch)"
      - "kotlin.collections.MutableList.add(com.datadog.android.core.internal.persistence.tlvformat.TLVBlock)"
      - "kotlin.collections.MutableList.add(com.datadog.android.plugin.DatadogPlugin)"
      - "kotlin.collections.MutableList.add(com.datadog.android.rum.internal.domain.scope.RumScope)"
      - "kotlin.collections.MutableList.add(com.datadog.android.rum.internal.domain.scope.RumViewScope)"
      - "kotlin.collections.MutableList.add(com.datadog.android.rum.internal.vitals.FrameStateListener)"
      - "kotlin.collections.MutableList.add(com.datadog.android.rum.model.ActionEvent.Type)"
      - "kotlin.collections.MutableList.add(com.datadog.android.sessionreplay.compose.internal.data.Parameter)"
      - "kotlin.collections.MutableList.add(com.datadog.android.sessionreplay.compose.internal.utils.BackgroundInfo)"
      - "kotlin.collections.MutableList.add(com.datadog.android.sessionreplay.internal.prerequisite.SystemRequirementChecker)"
      - "kotlin.collections.MutableList.add(com.datadog.android.sessionreplay.internal.processor.MutationResolver.Entry)"
      - "kotlin.collections.MutableList.add(com.datadog.android.sessionreplay.model.MobileSegment.Add)"
      - "kotlin.collections.MutableList.add(com.datadog.android.sessionreplay.model.MobileSegment.MobileRecord)"
      - "kotlin.collections.MutableList.add(com.datadog.android.sessionreplay.model.MobileSegment.Position)"
      - "kotlin.collections.MutableList.add(com.datadog.android.sessionreplay.model.MobileSegment.Remove)"
      - "kotlin.collections.MutableList.add(com.datadog.android.sessionreplay.model.MobileSegment.Wireframe)"
      - "kotlin.collections.MutableList.add(com.datadog.android.sessionreplay.model.MobileSegment.WireframeUpdateMutation)"
      - "kotlin.collections.MutableList.add(java.io.File)"
      - "kotlin.collections.MutableList.add(java.lang.ref.WeakReference)"
      - "kotlin.collections.MutableList.add(java.net.InetAddress)"
      - "kotlin.collections.MutableList.add(kotlin.ByteArray)"
      - "kotlin.collections.MutableList.add(kotlin.Int)"
      - "kotlin.collections.MutableList.add(kotlin.Int, com.datadog.android.sessionreplay.MapperTypeWrapper)"
      - "kotlin.collections.MutableList.add(kotlin.Int, com.datadog.android.sessionreplay.internal.recorder.mapper.MapperTypeWrapper)"
      - "kotlin.collections.MutableList.add(kotlin.Int, com.datadog.android.sessionreplay.model.MobileSegment.Wireframe)"
      - "kotlin.collections.MutableList.add(kotlin.Int, com.datadog.android.sessionreplay.model.MobileSegment.Wireframe.ShapeWireframe)"
      - "kotlin.collections.MutableList.add(kotlin.String)"
      - "kotlin.collections.MutableList.addAll(kotlin.collections.Collection)"
      - "kotlin.collections.MutableList.clear()"
      - "kotlin.collections.MutableList.count(kotlin.Function1)"
      - "kotlin.collections.MutableList.filter(kotlin.Function1)"
      - "kotlin.collections.MutableList.filterIsInstance()"
      - "kotlin.collections.MutableList.find(kotlin.Function1)"
      - "kotlin.collections.MutableList.firstOrNull(kotlin.Function1)"
      - "kotlin.collections.MutableList.firstOrNull(kotlin.Function1)"
      - "kotlin.collections.MutableList.forEach(kotlin.Function1)"
      - "kotlin.collections.MutableList.forEachIndexed(kotlin.Function2)"
      - "kotlin.collections.MutableList.isEmpty()"
      - "kotlin.collections.MutableList.isNotEmpty()"
      - "kotlin.collections.MutableList.isNullOrEmpty()"
      - "kotlin.collections.MutableList.iterator()"
      - "kotlin.collections.MutableList.joinToString(kotlin.CharSequence, kotlin.CharSequence, kotlin.CharSequence, kotlin.Int, kotlin.CharSequence, kotlin.Function1?)"
      - "kotlin.collections.MutableList.map(kotlin.Function1)"
      - "kotlin.collections.MutableList.remove(java.io.File)"
      - "kotlin.collections.MutableList.remove(java.lang.ref.WeakReference)"
      - "kotlin.collections.MutableList.remove(kotlin.Int)"
      - "kotlin.collections.MutableList.removeAll(kotlin.Function1)"
      - "kotlin.collections.MutableList.removeAt(kotlin.Int)"
      - "kotlin.collections.MutableList.removeFirstOrNull()"
      - "kotlin.collections.MutableList.toMutableList()"
      - "kotlin.collections.MutableList.toList()"
      - "kotlin.collections.MutableList.toSet()"
      - "kotlin.collections.MutableList.toTypedArray()"
      - "kotlin.collections.MutableList.withIndex()"
      - "kotlin.collections.MutableList.firstOrNull()"
      - "kotlin.collections.MutableMap.asSequence()"
      - "kotlin.collections.MutableMap.clear()"
      - "kotlin.collections.MutableMap.containsKey(android.view.Window)"
      - "kotlin.collections.MutableMap.containsKey(com.datadog.android.api.SdkCore)"
      - "kotlin.collections.MutableMap.containsKey(com.datadog.android.api.storage.RawBatchEvent)"
      - "kotlin.collections.MutableMap.containsKey(kotlin.Long)"
      - "kotlin.collections.MutableMap.containsKey(kotlin.String)"
      - "kotlin.collections.MutableMap.filter(kotlin.Function1)"
      - "kotlin.collections.MutableMap.filterKeys(kotlin.Function1)"
      - "kotlin.collections.MutableMap.filterValues(kotlin.Function1)"
      - "kotlin.collections.MutableMap.forEach(kotlin.Function1)"
      - "kotlin.collections.MutableMap.get(kotlin.String)"
      - "kotlin.collections.MutableMap.getOrElse(java.lang.Class, kotlin.Function0)"
      - "kotlin.collections.MutableMap.getOrPut(kotlin.String, kotlin.Function0)"
      - "kotlin.collections.MutableMap.isEmpty()"
      - "kotlin.collections.MutableMap.isNotEmpty()"
      - "kotlin.collections.MutableMap.iterator()"
      - "kotlin.collections.MutableMap.map(kotlin.Function1)"
      - "kotlin.collections.MutableMap.mapValues(kotlin.Function1)"
      - "kotlin.collections.MutableMap.put(kotlin.Any?, kotlin.Any?)"
      - "kotlin.collections.MutableMap.put(kotlin.String, kotlin.Any)"
      - "kotlin.collections.MutableMap.put(kotlin.String, kotlin.Any?)"
      - "kotlin.collections.MutableMap.put(kotlin.String, kotlin.String)"
      - "kotlin.collections.MutableMap.put(kotlin.String, kotlin.Int)"
      - "kotlin.collections.MutableMap.put(kotlin.String, kotlin.Long?)"
      - "kotlin.collections.MutableMap.put(kotlin.String, kotlin.Long)"
      - "kotlin.collections.MutableMap.put(kotlin.String, kotlin.collections.Map)"
      - "kotlin.collections.MutableMap.put(kotlin.String, UNKNOWN)"
      - "kotlin.collections.MutableMap.putAll(kotlin.collections.Map)"
      - "kotlin.collections.MutableMap.remove(androidx.compose.foundation.interaction.DragInteraction.Start)"
      - "kotlin.collections.MutableMap.remove(com.datadog.android.api.SdkCore)"
      - "kotlin.collections.MutableMap.remove(com.datadog.android.rum.internal.vitals.VitalListener)"
      - "kotlin.collections.MutableMap.remove(kotlin.Int)"
      - "kotlin.collections.MutableMap.remove(kotlin.Long)"
      - "kotlin.collections.MutableMap.remove(kotlin.String)"
      - "kotlin.collections.MutableMap.toMap()"
      - "kotlin.collections.MutableMap.toMutableMap()"
      - "kotlin.collections.MutableMap?.forEach(kotlin.Function1)"
      - "kotlin.collections.MutableSet.add(com.datadog.android.api.feature.FeatureContextUpdateReceiver?)"
      - "kotlin.collections.MutableSet.add(com.datadog.android.core.internal.persistence.ConsentAwareStorage.Batch)"
      - "kotlin.collections.MutableSet.add(com.datadog.android.sessionreplay.ExtensionSupport)"
      - "kotlin.collections.MutableSet.add(com.datadog.android.telemetry.internal.TelemetryEventId)"
      - "kotlin.collections.MutableSet.add(java.io.File)"
      - "kotlin.collections.MutableSet.add(kotlin.String)"
      - "kotlin.collections.MutableSet.add(kotlin.String?)"
      - "kotlin.collections.MutableSet.addAll(kotlin.collections.Collection)"
      - "kotlin.collections.MutableSet.any(kotlin.Function1)"
      - "kotlin.collections.MutableSet.clear()"
      - "kotlin.collections.MutableSet.contains(com.datadog.android.telemetry.internal.TelemetryEventId)"
      - "kotlin.collections.MutableSet.contains(kotlin.String)"
      - "kotlin.collections.MutableSet.contains(kotlin.String?)"
      - "kotlin.collections.MutableSet.filter(kotlin.Function1)"
      - "kotlin.collections.MutableSet.firstOrNull(kotlin.Function1)"
      - "kotlin.collections.MutableSet.flatMap(kotlin.Function1)"
      - "kotlin.collections.MutableSet.forEach(kotlin.Function1)"
      - "kotlin.collections.MutableSet.elementAtOrNull(kotlin.Int)"
      - "kotlin.collections.MutableSet.indexOf(kotlin.String)"
      - "kotlin.collections.MutableSet.joinToString(kotlin.CharSequence, kotlin.CharSequence, kotlin.CharSequence, kotlin.Int, kotlin.CharSequence, kotlin.Function1?)"
      - "kotlin.collections.MutableSet.map(kotlin.Function1)"
      - "kotlin.collections.MutableSet.remove(com.datadog.android.core.internal.persistence.ConsentAwareStorage.Batch)"
      - "kotlin.collections.MutableSet.remove(java.io.File)"
      - "kotlin.collections.MutableSet.remove(kotlin.collections.MutableMap.Mutab(...)"
      - "kotlin.collections.MutableSet.removeAll(kotlin.collections.Collection)"
      - "kotlin.collections.MutableSet.toList()"
      - "kotlin.collections.MutableSet.lastOrNull()"
      - "kotlin.collections.MutableSet.sortedByDescending(kotlin.Function1)"
      - "kotlin.collections.Set.any(kotlin.Function1)"
      - "kotlin.collections.Set.associate(kotlin.Function1)"
      - "kotlin.collections.Set.contains(com.datadog.android.trace.TracingHeaderType)"
      - "kotlin.collections.Set.firstOrNull(kotlin.Function1)"
      - "kotlin.collections.Set.forEach(kotlin.Function1)"
      - "kotlin.collections.Set.ifEmpty(kotlin.Function0)"
      - "kotlin.collections.Set.isEmpty()"
      - "kotlin.collections.Set.joinToString(kotlin.CharSequence, kotlin.CharSequence, kotlin.CharSequence, kotlin.Int, kotlin.CharSequence, kotlin.Function1?)"
      - "kotlin.collections.Set.map(kotlin.Function1)"
      - "kotlin.collections.Set.plus(kotlin.collections.Iterable)"
      - "kotlin.collections.Set.toList()"
      - "kotlin.collections.emptyList()"
      - "kotlin.collections.emptyMap()"
      - "kotlin.collections.emptySet()"
      - "kotlin.collections.listOf(android.view.Window)"
      - "kotlin.collections.listOf(com.datadog.android.api.InternalLogger.Target)"
      - "kotlin.collections.listOf(com.datadog.android.rum.internal.vitals.FPSVitalListener)"
      - "kotlin.collections.listOf(com.datadog.android.rum.model.ActionEvent.Interface)"
      - "kotlin.collections.listOf(com.datadog.android.rum.model.ErrorEvent.Interface)"
      - "kotlin.collections.listOf(com.datadog.android.rum.model.LongTaskEvent.Interface)"
      - "kotlin.collections.listOf(com.datadog.android.rum.model.ResourceEvent.Interface)"
      - "kotlin.collections.listOf(com.datadog.android.rum.model.ViewEvent.Interface)"
      - "kotlin.collections.listOf(com.datadog.android.sessionreplay.MapperTypeWrapper)"
      - "kotlin.collections.listOf(com.datadog.android.sessionreplay.internal.recorder.DefaultOptionSelectorDetector)"
      - "kotlin.collections.listOf(com.datadog.android.sessionreplay.material.internal.MaterialDrawableToColorMapper)"
      - "kotlin.collections.listOf(com.datadog.android.sessionreplay.material.internal.MaterialOptionSelectorDetector)"
      - "kotlin.collections.listOf(com.datadog.android.sessionreplay.model.MobileSegment.MobileRecord.ViewEndRecord)"
      - "kotlin.collections.listOf(com.datadog.android.sessionreplay.model.MobileSegment.Wireframe)"
      - "kotlin.collections.listOf(com.datadog.android.sessionreplay.model.MobileSegment.Wireframe.PlaceholderWireframe)"
      - "kotlin.collections.listOf(com.datadog.android.sessionreplay.model.MobileSegment.Wireframe.ShapeWireframe)"
      - "kotlin.collections.listOf(com.datadog.android.sessionreplay.model.MobileSegment.Wireframe.TextWireframe)"
      - "kotlin.collections.listOf(com.datadog.android.sessionreplay.model.MobileSegment.Wireframe.WebviewWireframe)"
      - "kotlin.collections.listOf(java.io.File)"
      - "kotlin.collections.listOf(kotlin.Array)"
      - "kotlin.collections.listOf(kotlin.String)"
      - "kotlin.collections.listOf(okhttp3.ConnectionSpec)"
      - "kotlin.collections.mapOf()"
      - "kotlin.collections.listOfNotNull(com.datadog.android.sessionreplay.model.MobileSegment.Wireframe?)"
      - "kotlin.collections.listOfNotNull(kotlin.Array)"
      - "kotlin.collections.mapOf(kotlin.Array)"
      - "kotlin.collections.mapOf(kotlin.Pair)"
      - "kotlin.collections.mutableListOf()"
      - "kotlin.collections.mutableListOf(kotlin.Array)"
      - "kotlin.collections.mutableMapOf()"
      - "kotlin.collections.mutableMapOf(kotlin.Array)"
      - "kotlin.collections.mutableSetOf()"
      - "kotlin.collections.setOf(com.datadog.android.trace.TracingHeaderType)"
      - "kotlin.collections.setOf(kotlin.Array)"
      - "kotlin.collections.setOf(kotlin.Int)"
      - "kotlin.collections.setOf(kotlin.String)"
      - "kotlin.collections.linkedMapOf()"
      - "kotlin.collections.MutableCollection.count(kotlin.Function1)"
      - "kotlin.collections.MutableCollection.sumOf(kotlin.Function1)"
      - "kotlin.collections.MutableCollection.sum()"
      - "kotlin.collections.List.sortedByDescending(kotlin.Function1)"
      - "kotlin.emptyArray()"
      - "kotlin.sequences.Sequence.groupBy(kotlin.Function1)"
      - "kotlin.sequences.Sequence.filter(kotlin.Function1)"
      - "kotlin.sequences.Sequence.firstOrNull()"
      - "kotlin.sequences.Sequence.firstOrNull(kotlin.Function1)"
      - "kotlin.sequences.Sequence.flatMap(kotlin.Function1)"
      - "kotlin.sequences.Sequence.fold(com.google.gson.JsonArray, kotlin.Function2)"
      - "kotlin.sequences.Sequence.forEach(kotlin.Function1)"
      - "kotlin.sequences.Sequence.map(kotlin.Function1)"
      - "kotlin.sequences.Sequence.mapIndexedNotNull(kotlin.Function2)"
      - "kotlin.sequences.Sequence.mapNotNull(kotlin.Function1)"
      - "kotlin.sequences.Sequence.reduceOrNull(kotlin.Function2)"
      - "kotlin.sequences.Sequence.sortedBy(kotlin.Function1)"
      - "kotlin.sequences.emptySequence()"
      # endregion
      # region Kotlin Primitives
      - "kotlin.Any.constructor()"
      - "kotlin.Any.hashCode()"
      - "kotlin.Any.takeIf(kotlin.Function1)"
      - "kotlin.Any.toString()"
      - "kotlin.Boolean.hashCode()"
      - "kotlin.Boolean.not()"
      - "kotlin.Boolean.takeIf(kotlin.Function1)"
      - "kotlin.Byte.toInt()"
      - "kotlin.ByteArray.constructor(kotlin.Int)"
      - "kotlin.ByteArray.copyTo(kotlin.Int, kotlin.ByteArray, kotlin.Int, kotlin.Int, com.datadog.android.api.InternalLogger)"
      - "kotlin.Char.digitToIntOrNull()"
      - "kotlin.Char.isLowerCase()"
      - "kotlin.Char.titlecase(java.util.Locale)"
      - "kotlin.CharArray.constructor(kotlin.Int, kotlin.Function1)"
      - "kotlin.Double.coerceAtMost(kotlin.Double)"
      - "kotlin.Double.isNaN()"
      - "kotlin.Double.pow(kotlin.Int)"
      - "kotlin.Double.pow(kotlin.Double)"
      - "kotlin.Double.rangeTo(kotlin.Double)"
      - "kotlin.Double.toFloat()"
      - "kotlin.Double.toInt()"
      - "kotlin.Double.toLong()"
      - "kotlin.Double.toULong()"
      - "kotlin.Float.fromBits(kotlin.Int)"
      - "kotlin.Float.percent()"
      - "kotlin.Float.roundToInt()"
      - "kotlin.Float.roundToLong()"
      - "kotlin.Float.toDouble()"
      - "kotlin.Float.toFloat()"
      - "kotlin.Float.toInt()"
      - "kotlin.Float.toLong()"
      - "kotlin.FloatArray.constructor(kotlin.Int)"
      - "kotlin.Int.and(kotlin.Int)"
      - "kotlin.Int.coerceAtMost(kotlin.Int)"
      - "kotlin.Int.inv()"
      - "kotlin.Int.toChar()"
      - "kotlin.Int.toDouble()"
      - "kotlin.Int.toFloat()"
      - "kotlin.Int.toLong()"
      - "kotlin.IntArray.constructor(kotlin.Int)"
      - "kotlin.IntArray.joinToString(kotlin.CharSequence, kotlin.CharSequence, kotlin.CharSequence, kotlin.Int, kotlin.CharSequence, kotlin.Function1?)"
      - "kotlin.Long.coerceIn(kotlin.Long, kotlin.Long)"
      - "kotlin.Long.hashCode()"
      - "kotlin.Long.or(kotlin.Long)"
      - "kotlin.Long.shl(kotlin.Int)"
      - "kotlin.Long.toDouble()"
      - "kotlin.Long.toInt()"
      - "kotlin.Long.toFloat()"
      - "kotlin.Long.toULong()"
      - "kotlin.LongArray.constructor(kotlin.Int)"
      - "kotlin.Number.toFloat()"
      - "kotlin.Number.toLong()"
      - "kotlin.Short.toUShort()"
      - "kotlin.ULong.toLong()"
      - "kotlin.String.lowercase()"
      - "kotlin.String.takeIf(kotlin.Function1)"
      - "kotlin.String.toBigIntegerOrNull()"
      - "kotlin.String.toRegex()"
      - "kotlin.String.trim(kotlin.Function1)"
      - "kotlin.ULong.toDouble()"
      - "kotlin.UShort.toShort()"
      - "kotlin.math.abs(kotlin.Float)"
      - "kotlin.math.max(kotlin.Double, kotlin.Double)"
      - "kotlin.math.max(kotlin.Int, kotlin.Int)"
      - "kotlin.math.max(kotlin.Long, kotlin.Long)"
      - "kotlin.math.min(kotlin.Double, kotlin.Double)"
      - "kotlin.math.min(kotlin.Long, kotlin.Long)"
      - "kotlin.math.sqrt(kotlin.Double)"
      # endregion
      # region Kotlin Tuples
      - "kotlin.Pair.constructor(kotlin.String, kotlin.Int)"
      - "kotlin.Pair.constructor(com.datadog.android.sessionreplay.internal.utils.SessionReplayRumContext, com.google.gson.JsonArray)"
      - "kotlin.Pair.constructor(com.datadog.android.sessionreplay.model.MobileSegment, com.google.gson.JsonObject)"
      - "kotlin.Pair.constructor(com.google.gson.JsonObject, kotlin.Long)"
      - "kotlin.Pair.constructor(kotlin.Int, kotlin.Int)"
      - "kotlin.Pair.constructor(kotlin.Long, kotlin.Long)"
      - "kotlin.Triple.constructor(kotlin.String?, kotlin.String?, kotlin.String?)"
      - "kotlin.Triple.constructor(kotlin.Nothing?, kotlin.Nothing?, kotlin.Nothing?)"
      # endregion
      # region Kotlin String
      - "kotlin.Any?.takeIf(kotlin.Function1)"
      - "kotlin.CharSequence.isNullOrEmpty()"
      - "kotlin.String.all(kotlin.Function1)"
      - "kotlin.String.codePoints()"
      - "kotlin.String.constructor()"
      - "kotlin.String.contains(kotlin.Char, kotlin.Boolean)"
      - "kotlin.String.contains(kotlin.CharSequence, kotlin.Boolean)"
      - "kotlin.String.count(kotlin.Function1)"
      - "kotlin.String.endsWith(kotlin.Char, kotlin.Boolean)"
      - "kotlin.String.endsWith(kotlin.String, kotlin.Boolean)"
      - "kotlin.String.filter(kotlin.Function1)"
      - "kotlin.String.format(java.util.Locale?, kotlin.Array)"
      - "kotlin.String.format(java.util.Locale?, kotlin.String, kotlin.Array)"
      - "kotlin.String.hashCode()"
      - "kotlin.String.ifBlank(kotlin.Function0)"
      - "kotlin.String.ifEmpty(kotlin.Function0)"
      - "kotlin.String.indexOf(kotlin.Char, kotlin.Int, kotlin.Boolean)"
      - "kotlin.String.isBlank()"
      - "kotlin.String.isEmpty()"
      - "kotlin.String.isNotBlank()"
      - "kotlin.String.isNotEmpty()"
      - "kotlin.String.isNullOrBlank()"
      - "kotlin.String.isNullOrEmpty()"
      - "kotlin.String.lines()"
      - "kotlin.String.lowercase(java.util.Locale)"
      - "kotlin.String.map(kotlin.Function1)"
      - "kotlin.String.matches(kotlin.text.Regex)"
      - "kotlin.String.orEmpty()"
      - "kotlin.String.padStart(kotlin.Int, kotlin.Char)"
      - "kotlin.String.plus(kotlin.Any?)"
      - "kotlin.String.replace(kotlin.Char, kotlin.Char, kotlin.Boolean)"
      - "kotlin.String.replace(kotlin.text.Regex, kotlin.String)"
      - "kotlin.String.replaceFirstChar(kotlin.Function1)"
      - "kotlin.String.split(kotlin.Array, kotlin.Boolean, kotlin.Int)"
      - "kotlin.String.split(kotlin.Array, kotlin.Boolean, kotlin.Int)"
      - "kotlin.String.split(kotlin.CharArray, kotlin.Boolean, kotlin.Int)"
      - "kotlin.String.split(kotlin.text.Regex, kotlin.Int)"
      - "kotlin.String.startsWith(kotlin.String, kotlin.Boolean)"
      - "kotlin.String.substringAfter(kotlin.Char, kotlin.String)"
      - "kotlin.String.substringAfterLast(kotlin.Char, kotlin.String)"
      - "kotlin.String.substringBefore(kotlin.Char, kotlin.String)"
      - "kotlin.String.takeLeastSignificant64Bits()"
      - "kotlin.String.toByteArray(java.nio.charset.Charset) "
      - "kotlin.String.toByteArray(java.nio.charset.Charset)"
      - "kotlin.String.toDoubleOrNull()"
      - "kotlin.String.toHttpUrlOrNull()"
      - "kotlin.String.toIntOrNull()"
      - "kotlin.String.toIntOrNull(kotlin.Int)"
      - "kotlin.String.toLongOrNull()"
      - "kotlin.String.toMediaTypeOrNull()"
      - "kotlin.String.toMethod()"
      - "kotlin.String.trim()"
      - "kotlin.String.trimStart()"
      - "kotlin.String.uppercase(java.util.Locale)"
      - "kotlin.text.String(kotlin.ByteArray)"
      - "kotlin.text.String(kotlin.ByteArray, java.nio.charset.Charset)"
      - "kotlin.text.String(kotlin.CharArray)"
      - "kotlin.text.StringBuilder()"
      - "kotlin.text.buildString(kotlin.Function1)"
      - "kotlin.text.buildString(kotlin.Int, kotlin.Function1)"
      # endregion
      # region Kotlin Misc
      - "kotlin.IllegalArgumentException(kotlin.String?)"
      - "kotlin.IllegalStateException(kotlin.String?)"
      - "kotlin.Throwable.constructor()"
      - "kotlin.Throwable.fillInStackTrace()"
      - "kotlin.Throwable.stackTraceToString()"
      - "kotlin.UnsupportedOperationException()"
      - "kotlin.UnsupportedOperationException(kotlin.String?)"
      - "kotlin.comparisons.maxOf(kotlin.Float, kotlin.Float)"
      - "kotlin.comparisons.minOf(kotlin.Float, kotlin.Float)"
      - "kotlin.ranges.IntRange.map(kotlin.Function1)"
      - "kotlin.ranges.IntRange.reversed()"
      - "kotlin.text.Regex.constructor(kotlin.String)"
      - "kotlin.text.Regex.matchEntire(kotlin.CharSequence)"
      # endregion
      # region Kotlin Coroutines
      - "kotlinx.coroutines.CoroutineScope.async(kotlin.coroutines.CoroutineContext, kotlinx.coroutines.CoroutineStart, kotlin.coroutines.SuspendFunction1)"
      - "kotlinx.coroutines.CoroutineScope.launch(kotlin.coroutines.CoroutineContext, kotlinx.coroutines.CoroutineStart, kotlin.coroutines.SuspendFunction1)"
      - "kotlinx.coroutines.CoroutineScope.withinCoroutineSpan(kotlin.String, io.opentracing.Span?, kotlin.coroutines.CoroutineContext, kotlin.coroutines.SuspendFunction1)"
      - "kotlinx.coroutines.flow.FlowCollector.emit(kotlin.Any?)"
      - "kotlinx.coroutines.flow.FlowCollector(kotlin.coroutines.SuspendFunction1)"
      - "kotlinx.coroutines.flow.flow(kotlin.coroutines.SuspendFunction1)"
      # endregion
      # region Kronos
      - "com.lyft.kronos.AndroidClockFactory.createKronosClock(android.content.Context, com.lyft.kronos.SyncListener?, kotlin.collections.List, kotlin.Long, kotlin.Long, kotlin.Long, kotlin.Long)"
      - "com.lyft.kronos.Clock.getCurrentTimeMs()"
      - "com.lyft.kronos.KronosTime.constructor(kotlin.Long, kotlin.Long?)"
      # endregion
      # region OkHttp
      - "okhttp3.Call.Factory.newCall(okhttp3.Request)"
      - "okhttp3.Call.request()"
      - "okhttp3.ConnectionSpec.Builder.build()"
      - "okhttp3.ConnectionSpec.Builder.cipherSuites(kotlin.Array)"
      - "okhttp3.ConnectionSpec.Builder.constructor(okhttp3.ConnectionSpec)"
      - "okhttp3.ConnectionSpec.Builder.supportsTlsExtensions(kotlin.Boolean)"
      - "okhttp3.ConnectionSpec.Builder.tlsVersions(kotlin.Array)"
      - "okhttp3.EventListener.callEnd(okhttp3.Call)"
      - "okhttp3.EventListener.callFailed(okhttp3.Call, java.io.IOException)"
      - "okhttp3.EventListener.callStart(okhttp3.Call)"
      - "okhttp3.EventListener.connectEnd(okhttp3.Call, java.net.InetSocketAddress, java.net.Proxy, okhttp3.Protocol?)"
      - "okhttp3.EventListener.connectFailed(okhttp3.Call)"
      - "okhttp3.EventListener.connectStart(okhttp3.Call, java.net.InetSocketAddress, java.net.Proxy)"
      - "okhttp3.EventListener.dnsEnd(okhttp3.Call, kotlin.String, kotlin.collections.List)"
      - "okhttp3.EventListener.dnsStart(okhttp3.Call, kotlin.String)"
      - "okhttp3.EventListener.responseBodyEnd(okhttp3.Call, kotlin.Long)"
      - "okhttp3.EventListener.responseBodyStart(okhttp3.Call)"
      - "okhttp3.EventListener.responseHeadersEnd(okhttp3.Call, okhttp3.Response)"
      - "okhttp3.EventListener.responseHeadersStart(okhttp3.Call)"
      - "okhttp3.EventListener.secureConnectEnd(okhttp3.Call, okhttp3.Handshake?)"
      - "okhttp3.EventListener.secureConnectStart(okhttp3.Call)"
      - "okhttp3.Headers.toMultimap()"
      - "okhttp3.HttpUrl.host()"
      - "okhttp3.HttpUrl.parse(kotlin.String)"
      - "okhttp3.HttpUrl.url()"
      - "okhttp3.Interceptor.Chain.request()"
      - "okhttp3.MultipartBody.Builder.constructor(kotlin.String)"
      - "okhttp3.MultipartBody.Builder.addFormDataPart(kotlin.String, kotlin.String?, okhttp3.RequestBody)"
      - "okhttp3.MultipartBody.Part.body()"
      - "okhttp3.MultipartBody.Part.headers()"
      - "okhttp3.MultipartBody.parts()"
      - "okhttp3.OkHttpClient.Builder()"
      - "okhttp3.OkHttpClient.Builder.build()"
      - "okhttp3.OkHttpClient.Builder.callTimeout(kotlin.Long, java.util.concurrent.TimeUnit)"
      - "okhttp3.OkHttpClient.Builder.connectionSpecs(kotlin.collections.List)"
      - "okhttp3.OkHttpClient.Builder.constructor()"
      - "okhttp3.OkHttpClient.Builder.protocols(kotlin.collections.List)"
      - "okhttp3.OkHttpClient.Builder.proxy(java.net.Proxy?)"
      - "okhttp3.OkHttpClient.Builder.proxyAuthenticator(okhttp3.Authenticator)"
      - "okhttp3.OkHttpClient.Builder.writeTimeout(kotlin.Long, java.util.concurrent.TimeUnit)"
      - "okhttp3.OkHttpClient.newCall(okhttp3.Request)"
      - "okhttp3.Request.Builder()"
      - "okhttp3.Request.Builder.addHeader(kotlin.String, kotlin.String)"
      - "okhttp3.Request.Builder.header(kotlin.String, kotlin.String)"
      - "okhttp3.Request.Builder.removeHeader(kotlin.String)"
      - "okhttp3.Request.Builder.tag(java.lang.Class, io.opentracing.Span?)"
      - "okhttp3.Request.body()"
      - "okhttp3.Request.header(kotlin.String)"
      - "okhttp3.Request.headers()"
      - "okhttp3.Request.method()"
      - "okhttp3.Request.newBuilder()"
      - "okhttp3.Request.tag(java.lang.Class)"
      - "okhttp3.Request.url()"
      - "okhttp3.RequestBody.contentLength()"
      - "okhttp3.RequestBody.contentType()"
      - "okhttp3.RequestBody.create(okhttp3.MediaType?, kotlin.ByteArray)"
      - "okhttp3.Response.code()"
      - "okhttp3.Response.header(kotlin.String, kotlin.String?)"
      - "okhttp3.ResponseBody.contentLength()"
      - "okhttp3.ResponseBody.contentType()"
      - "okio.Buffer.constructor()"
      # endregion
      # region org.json
      - "org.json.JSONArray.length()"
      - "org.json.JSONArray.toJsonArray()"
      - "org.json.JSONObject.keys()"
      - "org.json.JSONObject.toJsonObject()"
      # endregion
      # region OpenTracing
      - "io.opentracing.Span.context()"
      - "io.opentracing.Span.finish()"
      - "io.opentracing.Span.log(kotlin.collections.MutableMap?)"
      - "io.opentracing.Span.setError(kotlin.Throwable)"
      - "io.opentracing.Span.setTag(kotlin.String?, kotlin.Number?)"
      - "io.opentracing.Span.setTag(kotlin.String?, kotlin.String?)"
      - "io.opentracing.Span.setTag(io.opentracing.tag.Tag?, kotlin.String?)"
      - "io.opentracing.SpanContext.toSpanId()"
      - "io.opentracing.SpanContext.toTraceId()"
      - "io.opentracing.Tracer.SpanBuilder.asChildOf(io.opentracing.Span?)"
      - "io.opentracing.Tracer.SpanBuilder.asChildOf(io.opentracing.SpanContext?)"
      - "io.opentracing.Tracer.SpanBuilder.start()"
      - "io.opentracing.Tracer.activateSpan(io.opentracing.Span?)"
      - "io.opentracing.Tracer.activeSpan()"
      - "io.opentracing.Tracer.buildSpan(kotlin.String?)"
      - "io.opentracing.Tracer.extract(io.opentracing.propagation.Format?, io.opentracing.propagation.TextMapExtract?)"
      - "io.opentracing.Tracer.inject(io.opentracing.SpanContext?, io.opentracing.propagation.Format?, io.opentracing.propagation.TextMapInject?)"
      - "io.opentracing.propagation.TextMapExtractAdapter.constructor(kotlin.collections.MutableMap?)"
      - "io.opentracing.propagation.TextMapInject(kotlin.Function2)"
      - "io.opentracing.util.GlobalTracer.get()"
      - "io.opentracing.util.GlobalTracer.isRegistered()"
      # endregion
      # region Opentelemetry
      - "io.opentelemetry.api.trace.Span.getInvalid()"
      - "io.opentelemetry.api.trace.TracerBuilder.build()"
      - "io.opentelemetry.api.trace.SpanBuilder.setAttribute(kotlin.String?, kotlin.String?)"
      - "io.opentelemetry.api.trace.TracerBuilder.setInstrumentationVersion(kotlin.String?)"
      - "io.opentelemetry.api.trace.TracerProvider.noop()"
      - "io.opentelemetry.context.Context.get(io.opentelemetry.context.ContextKey?)"
      - "io.opentelemetry.context.Context.makeCurrent()"
      - "io.opentelemetry.context.Context.root()"
      - "io.opentelemetry.context.ContextStorage.addWrapper(java.util.function.Function?)"
      - "io.opentelemetry.context.ContextStorage.attach(io.opentelemetry.context.Context?)"
      - "io.opentelemetry.context.ContextStorage.current()"
      - "io.opentelemetry.context.Scope.close()"
      # endregion
      # region RxJava
      - "io.reactivex.rxjava3.core.Completable.doOnError(io.reactivex.rxjava3.functions.Consumer?)"
      - "io.reactivex.rxjava3.core.Flowable.doOnError(io.reactivex.rxjava3.functions.Consumer?)"
      - "io.reactivex.rxjava3.core.Maybe.doOnError(io.reactivex.rxjava3.functions.Consumer?)"
      - "io.reactivex.rxjava3.core.Observable.doOnError(io.reactivex.rxjava3.functions.Consumer?)"
      - "io.reactivex.rxjava3.core.Single.doOnError(io.reactivex.rxjava3.functions.Consumer?)"
      # endregion
      # region SQLDelight
      - "com.squareup.sqldelight.android.AndroidSqliteDriver.Callback.onCorruption(androidx.sqlite.db.SupportSQLiteDatabase)"
      # endregion
      # region Kronos
      - "com.lyft.kronos.KronosClock.shutdown()"
      # endregion

datadog-test-pyramid:
  active: false
