class com.datadog.android.okhttp.DatadogEventListener : okhttp3.EventListener
  override fun callStart(okhttp3.Call)
  override fun dnsStart(okhttp3.Call, String)
  override fun dnsEnd(okhttp3.Call, String, List<java.net.InetAddress>)
  override fun connectStart(okhttp3.Call, java.net.InetSocketAddress, java.net.Proxy)
  override fun connectEnd(okhttp3.Call, java.net.InetSocketAddress, java.net.Proxy, okhttp3.Protocol?)
  override fun secureConnectStart(okhttp3.Call)
  override fun secureConnectEnd(okhttp3.Call, okhttp3.Handshake?)
  override fun responseHeadersStart(okhttp3.Call)
  override fun responseHeadersEnd(okhttp3.Call, okhttp3.Response)
  override fun responseBodyStart(okhttp3.Call)
  override fun responseBodyEnd(okhttp3.Call, Long)
  override fun callEnd(okhttp3.Call)
  override fun callFailed(okhttp3.Call, java.io.IOException)
  class Factory : okhttp3.EventListener.Factory
    constructor(String? = null)
    override fun create(okhttp3.Call): okhttp3.EventListener
open class com.datadog.android.okhttp.DatadogInterceptor : com.datadog.android.okhttp.trace.TracingInterceptor
  DEPRECATED constructor(String? = null, Map<String, Set<com.datadog.android.trace.TracingHeaderType>>, com.datadog.android.okhttp.trace.TracedRequestListener = NoOpTracedRequestListener(), com.datadog.android.rum.RumResourceAttributesProvider = NoOpRumResourceAttributesProvider(), com.datadog.android.core.sampling.Sampler = RateBasedSampler(DEFAULT_TRACE_SAMPLE_RATE))
  DEPRECATED constructor(String? = null, List<String>, com.datadog.android.okhttp.trace.TracedRequestListener = NoOpTracedRequestListener(), com.datadog.android.rum.RumResourceAttributesProvider = NoOpRumResourceAttributesProvider(), com.datadog.android.core.sampling.Sampler = RateBasedSampler(DEFAULT_TRACE_SAMPLE_RATE))
  DEPRECATED constructor(String? = null, com.datadog.android.okhttp.trace.TracedRequestListener = NoOpTracedRequestListener(), com.datadog.android.rum.RumResourceAttributesProvider = NoOpRumResourceAttributesProvider(), com.datadog.android.core.sampling.Sampler = RateBasedSampler(DEFAULT_TRACE_SAMPLE_RATE))
  override fun intercept(okhttp3.Interceptor.Chain): okhttp3.Response
  override fun onRequestIntercepted(com.datadog.android.api.feature.FeatureSdkCore, okhttp3.Request, io.opentracing.Span?, okhttp3.Response?, Throwable?)
  override fun canSendSpan(): Boolean
  override fun onSdkInstanceReady(com.datadog.android.core.InternalSdkCore)
  class Builder : BaseBuilder<DatadogInterceptor, Builder>
    constructor(Map<String, Set<com.datadog.android.trace.TracingHeaderType>>)
    constructor(List<String>)
    override fun build(): DatadogInterceptor
    fun setRumResourceAttributesProvider(com.datadog.android.rum.RumResourceAttributesProvider): Builder
data class com.datadog.android.okhttp.TraceContext
  constructor(String, String, Int)
enum com.datadog.android.okhttp.TraceContextInjection
  - All
  - Sampled
fun okhttp3.Request.Builder.parentSpan(io.opentracing.Span): okhttp3.Request.Builder
interface com.datadog.android.okhttp.trace.TracedRequestListener
  fun onRequestIntercepted(okhttp3.Request, io.opentracing.Span, okhttp3.Response?, Throwable?)
open class com.datadog.android.okhttp.trace.TracingInterceptor : okhttp3.Interceptor
  DEPRECATED constructor(String? = null, List<String>, TracedRequestListener = NoOpTracedRequestListener(), com.datadog.android.core.sampling.Sampler = RateBasedSampler(DEFAULT_TRACE_SAMPLE_RATE))
  DEPRECATED constructor(String? = null, Map<String, Set<com.datadog.android.trace.TracingHeaderType>>, TracedRequestListener = NoOpTracedRequestListener(), com.datadog.android.core.sampling.Sampler = RateBasedSampler(DEFAULT_TRACE_SAMPLE_RATE))
  DEPRECATED constructor(String? = null, TracedRequestListener = NoOpTracedRequestListener(), com.datadog.android.core.sampling.Sampler = RateBasedSampler(DEFAULT_TRACE_SAMPLE_RATE))
  override fun intercept(okhttp3.Interceptor.Chain): okhttp3.Response
  protected open fun onRequestIntercepted(com.datadog.android.api.feature.FeatureSdkCore, okhttp3.Request, io.opentracing.Span?, okhttp3.Response?, Throwable?)
  class Builder : BaseBuilder<TracingInterceptor, Builder>
    constructor(Map<String, Set<com.datadog.android.trace.TracingHeaderType>>)
    constructor(List<String>)
    fun setTraceOrigin(String): Builder
    override fun build(): TracingInterceptor
  abstract class BaseBuilder<T: TracingInterceptor, R: BaseBuilder<T, R>>
    constructor(Map<String, Set<com.datadog.android.trace.TracingHeaderType>>)
    fun setSdkInstanceName(String): R
    fun setTracedRequestListener(TracedRequestListener): R
    fun setTraceSampler(com.datadog.android.core.sampling.Sampler): R
    fun setTraceContextInjection(com.datadog.android.okhttp.TraceContextInjection): R
    abstract fun build(): T
