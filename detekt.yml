build:
  maxIssues: 0
  weights:
  # complexity: 2
  # LongParameterList: 1
  # style: 1
  # comments: 1

processors:
  active: true
  exclude: [ ]
  # - 'DetektProgressListener'
  # - 'FunctionCountProcessor'
  # - 'PropertyCountProcessor'
  # - 'ClassCountProcessor'
  # - 'PackageCountProcessor'
  # - 'KtFileCountProcessor'

console-reports:
  active: true
  exclude:
    #  - 'ProjectStatisticsReport'
    #  - 'ComplexityReport'
    #  - 'NotificationReport'
    #  - 'FindingsReport'
    - 'FileBasedFindingsReport'
  #  - 'BuildFailureReport'

config:
  validation: false
  # 1. exclude rule set 'sample' and all its nested members
  # 2. exclude every property in every rule under the rule set 'sample'
  excludes: "datadog.*,datadog>.*>.*"

comments:
  active: true
  CommentOverPrivateFunction:
    active: true
  CommentOverPrivateProperty:
    active: true
  EndOfSentenceFormat:
    active: true
    endOfSentenceFormat: ([.?!][ \t\n\r\f<])|([.?!:]$)
  UndocumentedPublicClass:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    searchInNestedClass: true
    searchInInnerClass: true
    searchInInnerObject: true
    searchInInnerInterface: true
  UndocumentedPublicFunction:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
  UndocumentedPublicProperty:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]

complexity:
  active: true
  ComplexCondition:
    active: true
    threshold: 4
  ComplexInterface:
    active: true
    threshold: 10
    includeStaticDeclarations: false
  ComplexMethod:
    active: true
    threshold: 10
    ignoreSingleWhenExpression: true
    ignoreSimpleWhenEntries: true
  LabeledExpression:
    active: true
    ignoredLabels: [ ]
  LargeClass:
    active: true
    threshold: 600
  LongMethod:
    active: true
    threshold: 60
  LongParameterList:
    active: true
    constructorThreshold: 12
    functionThreshold: 6
    ignoreDefaultParameters: true
  MethodOverloading:
    active: true
    threshold: 6
  NestedBlockDepth:
    active: true
    threshold: 4
  StringLiteralDuplication:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    threshold: 3
    ignoreAnnotation: true
    excludeStringsWithLessThan5Characters: true
    ignoreStringsRegex: '$^'
  TooManyFunctions:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    thresholdInFiles: 11
    thresholdInClasses: 11
    thresholdInInterfaces: 11
    thresholdInObjects: 11
    thresholdInEnums: 11
    ignoreDeprecated: true
    ignorePrivate: true
    ignoreOverridden: true

empty-blocks:
  active: true
  EmptyCatchBlock:
    active: true
    allowedExceptionNameRegex: "^(_|(ignore|expected).*)"
  EmptyClassBlock:
    active: true
  EmptyDefaultConstructor:
    active: true
  EmptyDoWhileBlock:
    active: true
  EmptyElseBlock:
    active: true
  EmptyFinallyBlock:
    active: true
  EmptyForBlock:
    active: true
  EmptyFunctionBlock:
    active: true
    ignoreOverridden: true
  EmptyIfBlock:
    active: true
  EmptyInitBlock:
    active: true
  EmptyKtFile:
    active: true
  EmptySecondaryConstructor:
    active: true
  EmptyWhenBlock:
    active: true
  EmptyWhileBlock:
    active: true

exceptions:
  active: true
  ExceptionRaisedInUnexpectedLocation:
    active: true
    methodNames: [ 'toString','hashCode','equals','finalize' ]
  InstanceOfCheckForException:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
  NotImplementedDeclaration:
    active: true
  PrintStackTrace:
    active: true
  RethrowCaughtException:
    active: true
  ReturnFromFinally:
    active: true
    ignoreLabeled: true
  SwallowedException:
    active: true
    ignoredExceptionTypes: [ 'InterruptedException','NumberFormatException','ParseException','MalformedURLException' ]
    allowedExceptionNameRegex: "^(_|(ignore|expected).*)"
  ThrowingExceptionFromFinally:
    active: true
  ThrowingExceptionInMain:
    active: true
  ThrowingExceptionsWithoutMessageOrCause:
    active: true
    exceptions: [ 'IllegalArgumentException','IllegalStateException','IOException' ]
  ThrowingNewInstanceOfSameException:
    active: true
  TooGenericExceptionCaught:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    exceptionNames:
      - ArrayIndexOutOfBoundsException
      - Error
      - Exception
      - IllegalMonitorStateException
      - NullPointerException
      - IndexOutOfBoundsException
      - RuntimeException
      - Throwable
    allowedExceptionNameRegex: "^(_|(ignore|expected).*)"
  TooGenericExceptionThrown:
    active: true
    exceptionNames:
      - Error
      - Exception
      - Throwable
      - RuntimeException

formatting:
  active: false
  android: false
  autoCorrect: true
  AnnotationOnSeparateLine:
    active: true
    autoCorrect: true
  ChainWrapping:
    active: true
    autoCorrect: true
  CommentSpacing:
    active: true
    autoCorrect: true
  Filename:
    active: true
  FinalNewline:
    active: true
    autoCorrect: true
  ImportOrdering:
    active: true
    autoCorrect: true
  Indentation:
    active: true
    autoCorrect: true
    indentSize: 4
    continuationIndentSize: 4
  MaximumLineLength:
    active: true
    maxLineLength: 120
  ModifierOrdering:
    active: true
    autoCorrect: true
  MultiLineIfElse:
    active: true
    autoCorrect: true
  NoBlankLineBeforeRbrace:
    active: true
    autoCorrect: true
  NoConsecutiveBlankLines:
    active: true
    autoCorrect: true
  NoEmptyClassBody:
    active: true
    autoCorrect: true
  NoLineBreakAfterElse:
    active: true
    autoCorrect: true
  NoLineBreakBeforeAssignment:
    active: true
    autoCorrect: true
  NoMultipleSpaces:
    active: true
    autoCorrect: true
  NoSemicolons:
    active: true
    autoCorrect: true
  NoTrailingSpaces:
    active: true
    autoCorrect: true
  NoUnitReturn:
    active: true
    autoCorrect: true
  NoUnusedImports:
    active: true
    autoCorrect: true
  NoWildcardImports:
    active: true
    autoCorrect: true
  PackageName:
    active: true
    autoCorrect: true
  ParameterListWrapping:
    active: true
    autoCorrect: true
    indentSize: 4
  SpacingAroundColon:
    active: true
    autoCorrect: true
  SpacingAroundComma:
    active: true
    autoCorrect: true
  SpacingAroundCurly:
    active: true
    autoCorrect: true
  SpacingAroundDot:
    active: true
    autoCorrect: true
  SpacingAroundKeyword:
    active: true
    autoCorrect: true
  SpacingAroundOperators:
    active: true
    autoCorrect: true
  SpacingAroundParens:
    active: true
    autoCorrect: true
  SpacingAroundRangeOperator:
    active: true
    autoCorrect: true
  StringTemplate:
    active: true
    autoCorrect: true

naming:
  active: true
  ClassNaming:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    classPattern: '[A-Z$][a-zA-Z0-9$]*'
  ConstructorParameterNaming:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    parameterPattern: '[a-z][A-Za-z0-9]*'
    privateParameterPattern: '[a-z][A-Za-z0-9]*'
    excludeClassPattern: '$^'
  EnumNaming:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    enumEntryPattern: '^[A-Z][_a-zA-Z0-9]*'
  ForbiddenClassName:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    forbiddenName: [ ]
  FunctionMaxLength:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    maximumFunctionNameLength: 30
  FunctionMinLength:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    minimumFunctionNameLength: 3
  FunctionNaming:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    functionPattern: '^([a-z$][a-zA-Z$0-9]*)|(`.*`)$'
    excludeClassPattern: '$^'
    ignoreOverridden: true
  FunctionParameterNaming:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    parameterPattern: '[a-z][A-Za-z0-9]*'
    excludeClassPattern: '$^'
    ignoreOverridden: true
  InvalidPackageDeclaration:
    active: true
    rootPackage: ''
  MatchingDeclarationName:
    active: true
  MemberNameEqualsClassName:
    active: true
    ignoreOverridden: true
  ObjectPropertyNaming:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    constantPattern: '[A-Za-z][_A-Za-z0-9]*'
    propertyPattern: '[A-Za-z][_A-Za-z0-9]*'
    privatePropertyPattern: '(_)?[A-Za-z][_A-Za-z0-9]*'
  PackageNaming:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    packagePattern: '^[a-z]+(\.[a-z][A-Za-z0-9]*)*$'
  TopLevelPropertyNaming:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    constantPattern: '[A-Z][_A-Z0-9]*'
    propertyPattern: '[A-Za-z][_A-Za-z0-9]*'
    privatePropertyPattern: '_?[A-Za-z][_A-Za-z0-9]*'
  VariableMaxLength:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    maximumVariableNameLength: 64
  VariableMinLength:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    minimumVariableNameLength: 1
  VariableNaming:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    variablePattern: '[a-z][A-Za-z0-9]*'
    privateVariablePattern: '(_)?[a-z][A-Za-z0-9]*'
    excludeClassPattern: '$^'
    ignoreOverridden: true

performance:
  active: true
  ArrayPrimitive:
    active: true
  ForEachOnRange:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
  SpreadOperator:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
  UnnecessaryTemporaryInstantiation:
    active: true

potential-bugs:
  active: true
  Deprecation:
    active: true
  DuplicateCaseInWhenExpression:
    active: true
  EqualsAlwaysReturnsTrueOrFalse:
    active: true
  EqualsWithHashCodeExist:
    active: true
  ExplicitGarbageCollectionCall:
    active: true
  HasPlatformType:
    active: true
  InvalidRange:
    active: true
  IteratorHasNextCallsNextMethod:
    active: true
  IteratorNotThrowingNoSuchElementException:
    active: true
  LateinitUsage:
    active: false
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    excludeAnnotatedProperties: [ ]
    ignoreOnClassesPattern: ""
  MissingWhenCase:
    active: true
  RedundantElseInWhen:
    active: true
  UnconditionalJumpStatementInLoop:
    active: true
  UnreachableCode:
    active: true
  UnsafeCallOnNullableType:
    active: true
  UnsafeCast:
    active: true
  UselessPostfixExpression:
    active: true
  WrongEqualsTypeParameter:
    active: true

style:
  active: false
  CollapsibleIfStatements:
    active: true
  DataClassContainsFunctions:
    active: true
    conversionFunctionPrefix: 'to'
  DataClassShouldBeImmutable:
    active: true
  EqualsNullCall:
    active: true
  EqualsOnSignatureLine:
    active: true
  ExplicitItLambdaParameter:
    active: true
  ExpressionBodySyntax:
    active: false
    includeLineWrapping: false
  ForbiddenComment:
    active: true
    values: [ 'TODO:','FIXME:','STOPSHIP:' ]
    allowedPatterns: ""
  ForbiddenImport:
    active: true
    imports: [ ]
    forbiddenPatterns: ""
  ForbiddenVoid:
    active: true
    ignoreOverridden: false
    ignoreUsageInGenerics: true
  FunctionOnlyReturningConstant:
    active: true
    ignoreOverridableFunction: true
    excludedFunctions: 'describeContents'
    excludeAnnotatedFunction: [ "dagger.Provides" ]
  LibraryCodeMustSpecifyReturnType:
    active: true
  LoopWithTooManyJumpStatements:
    active: true
    maxJumpCount: 1
  MagicNumber:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    ignoreNumbers: [ '-1','0','1','2' ]
    ignoreHashCodeFunction: true
    ignorePropertyDeclaration: false
    ignoreConstantDeclaration: true
    ignoreCompanionObjectPropertyDeclaration: true
    ignoreAnnotation: false
    ignoreNamedArgument: true
    ignoreEnums: false
    ignoreRanges: false
  MandatoryBracesIfStatements:
    active: true
  MaxLineLength:
    active: true
    maxLineLength: 120
    excludePackageStatements: true
    excludeImportStatements: true
    excludeCommentStatements: false
  MayBeConst:
    active: true
  ModifierOrder:
    active: true
  NestedClassesVisibility:
    active: true
  NewLineAtEndOfFile:
    active: false
  NoTabs:
    active: true
  OptionalAbstractKeyword:
    active: true
  OptionalUnit:
    active: true
  OptionalWhenBraces:
    active: true
  PreferToOverPairSyntax:
    active: true
  ProtectedMemberInFinalClass:
    active: true
  RedundantExplicitType:
    active: true
  RedundantVisibilityModifierRule:
    active: false
  ReturnCount:
    active: true
    max: 2
    excludedFunctions: "equals"
    excludeLabeled: false
    excludeReturnFromLambda: true
    excludeGuardClauses: true
  SafeCast:
    active: true
  SerialVersionUIDInSerializableClass:
    active: true
  SpacingBetweenPackageAndImports:
    active: true
  ThrowsCount:
    active: true
    max: 2
  TrailingWhitespace:
    active: true
  UnderscoresInNumericLiterals:
    active: true
    acceptableDecimalLength: 5
  UnnecessaryAbstractClass:
    active: true
    excludeAnnotatedClasses: [ "dagger.Module" ]
  UnnecessaryApply:
    active: true
  UnnecessaryInheritance:
    active: true
  UnnecessaryLet:
    active: true
  UnnecessaryParentheses:
    active: true
  UntilInsteadOfRangeTo:
    active: true
  UnusedImports:
    active: true
  UnusedPrivateClass:
    active: true
  UnusedPrivateMember:
    active: true
    allowedNames: "(_|ignored|expected|serialVersionUID)"
  UseArrayLiteralsInAnnotations:
    active: true
  UseCheckOrError:
    active: true
  UseDataClass:
    active: true
    excludeAnnotatedClasses: [ ]
    allowVars: true
  UseIfInsteadOfWhen:
    active: true
  UseRequire:
    active: true
  UselessCallOnNotNull:
    active: true
  UtilityClassWithPublicConstructor:
    active: true
  VarCouldBeVal:
    active: true
  WildcardImport:
    active: true
    excludes: [ "**/test/**","**/androidTest/**","**/*.Test.kt","**/*.Spec.kt","**/*.Spek.kt" ]
    excludeImports: [ 'java.util.*','kotlinx.android.synthetic.*' ]

datadog:
  active: true
  UnsafeThirdPartyFunctionCall:
    active: true
    internalPackagePrefix: 'com.datadog'
    treatUnknownFunctionAsThrowing: true
    treatUnknownConstructorAsThrowing: false
    knownThrowingCalls:
      # region Android
      - "android.content.pm.PackageManager.getPackageInfo(kotlin.String, kotlin.Int):android.content.pm.PackageManager.NameNotFoundException"
      - "android.content.res.Resources.getResourceEntryName(kotlin.Int):android.content.res.Resources.NotFoundException"
      - "android.net.ConnectivityManager.registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback):java.lang.IllegalArgumentException,java.lang.SecurityException"
      - "android.net.ConnectivityManager.unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback):java.lang.SecurityException"
      - "android.view.Choreographer.getInstance():java.lang.IllegalStateException"
      - "android.view.Choreographer.postFrameCallback():java.lang.IllegalArgumentException"
      - "android.view.MotionEvent.obtain(android.view.MotionEvent):java.lang.IllegalArgumentException"
      - "android.view.View.getLocationOnScreen(kotlin.IntArray):java.lang.IllegalArgumentException"
      - "androidx.work.WorkManager.enqueueUniqueWork(kotlin.String, androidx.work.ExistingWorkPolicy, androidx.work.OneTimeWorkRequest):java.util.concurrent.RejectedExecutionException,java.lang.NullPointerException"
      - "android.content.res.Resources.getResourceName(kotlin.Int):android.content.res.Resources.NotFoundException"
      - "android.content.res.Resources.openRawResource(kotlin.Int):android.content.res.Resources.NotFoundException"
      # endregion
      # region Java File
      - "java.io.File.inputStream():java.io.FileNotFoundException,java.lang.SecurityException"
      - "java.io.File.canRead():java.lang.SecurityException"
      - "java.io.File.canWrite():java.lang.SecurityException"
      - "java.io.File.delete():java.lang.SecurityException"
      - "java.io.File.deleteRecursively():java.io.FileNotFoundException,java.lang.SecurityException"
      - "java.io.File.exists():java.lang.SecurityException"
      - "java.io.File.length():java.lang.SecurityException"
      - "java.io.File.listFiles():java.lang.SecurityException"
      - "java.io.File.mkdirs():java.lang.SecurityException"
      - "java.io.File.readText(java.nio.charset.Charset):java.io.FileNotFoundException,java.lang.SecurityException"
      - "java.io.File.readLines(java.nio.charset.Charset):java.io.FileNotFoundException,java.io.IOException,java.lang.SecurityException"
      - "java.io.FileInputStream.read(kotlin.ByteArray, kotlin.Int, kotlin.Int):java.io.IOException"
      - "java.io.FileInputStream.use(kotlin.Function1):java.io.IOException"
      - "java.io.FileOutputStream.use(kotlin.Function1):java.io.IOException"
      - "java.io.FileOutputStream.write(kotlin.ByteArray):java.io.IOException"
      - "java.io.InputStream.invoke():java.io.IOException"
      - "java.nio.channels.FileChannel.lock():java.io.IOException,java.lang.IllegalStateException"
      - "java.nio.channels.FileLock.use(kotlin.Function1):java.io.IOException"
      - "java.nio.channels.FileLock.release():java.io.IOException"
      - "kotlin.Function1.invoke(java.nio.channels.FileLock):java.io.IOException"
      # endregion
      # region Java Concurrency
      - "java.lang.Thread.sleep(kotlin.Long):java.lang.IllegalArgumentException,java.lang.InterruptedException"
      - "java.lang.Thread.interrupt():java.lang.SecurityException"
      - "java.util.concurrent.BlockingQueue.drainTo(kotlin.collections.MutableCollection):java.lang.UnsupportedOperationException,java.lang.ClassCastException,java.lang.NullPointerException,java.lang.IllegalArgumentException"
      - "java.util.concurrent.Callable.call():java.lang.Exception"
      - "java.util.concurrent.ConcurrentHashMap.remove(kotlin.String):java.lang.NullPointerException"
      - "java.util.concurrent.CopyOnWriteArraySet.removeAll(kotlin.collections.Collection):java.lang.NullPointerException,java.lang.ClassCastException"
      - "java.util.concurrent.ExecutorService.awaitTermination(kotlin.Long, java.util.concurrent.TimeUnit):java.lang.InterruptedException"
      - "java.util.concurrent.ExecutorService.execute(java.lang.Runnable):java.util.concurrent.RejectedExecutionException,java.lang.NullPointerException"
      - "java.util.concurrent.ExecutorService.submit(java.lang.Runnable):java.util.concurrent.RejectedExecutionException,java.lang.NullPointerException"
      - "java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, kotlin.Long, java.util.concurrent.TimeUnit):java.util.concurrent.RejectedExecutionException,java.lang.NullPointerException"
      - "java.util.concurrent.ScheduledThreadPoolExecutor.awaitTermination(kotlin.Long, java.util.concurrent.TimeUnit):java.lang.InterruptedException"
      - "java.util.concurrent.ScheduledThreadPoolExecutor.schedule(java.lang.Runnable, kotlin.Long, java.util.concurrent.TimeUnit):java.util.concurrent.RejectedExecutionException,java.lang.NullPointerException"
      # endregion
      # region Java misc
      - "java.text.SimpleDateFormat.format(java.util.Date):java.lang.NullPointerException"
      - "java.util.TimeZone.getTimeZone(kotlin.String):java.lang.NullPointerException"
      - "java.lang.Runtime.addShutdownHook(java.lang.Thread):java.lang.IllegalArgumentException,java.lang.IllegalStateException,java.lang.SecurityException"
      - "java.lang.System.arraycopy(kotlin.Any, kotlin.Int, kotlin.Any, kotlin.Int, kotlin.Int):java.lang.IndexOutOfBoundsException,java.lang.ArrayStoreException,java.lang.NullPointerException"
      - "java.lang.System.loadLibrary(kotlin.String):java.lang.SecurityException,java.lang.UnsatisfiedLinkError,java.lang.NullPointerException"
      # endregion
      # region Java Collections
      - "java.util.LinkedList.removeFirst():java.util.NoSuchElementException"
      # endregion
      # region Kotlin primitives
      - "kotlin.String.get(kotlin.Int):java.lang.IndexOutOfBoundsException"
      - "kotlin.String.substring(kotlin.Int, kotlin.Int):java.lang.IndexOutOfBoundsException"
      - "kotlin.String.substring(kotlin.Int):java.lang.IndexOutOfBoundsException"
      - "kotlin.String.toLong():java.lang.NumberFormatException"
      - "kotlin.ByteArray.copyOf(kotlin.Int):java.lang.NegativeArraySizeException"
      # endregion
      # region Kotlin Collections
      - "kotlin.collections.List.last():java.util.NoSuchElementException"
      - "kotlin.collections.List.get(kotlin.Int):java.util.NoSuchElementException"
      - "kotlin.collections.MutableIterator.next():java.util.NoSuchElementException"
      - "kotlin.collections.MutableIterator.remove():java.lang.UnsupportedOperationException,java.lang.IllegalStateException"
      # endregion
      # region Kotlin Coroutines
      - "kotlinx.coroutines.Deferred.await():java.util.concurrent.CancellationException"
      # endregion
      # region OkHttp
      - "okhttp3.Call.execute():java.io.IOException"
      - "okhttp3.Response.peekBody(kotlin.Long):java.io.IOException"
      - "okhttp3.RequestBody.writeTo(okio.BufferedSink):java.io.IOException"
      - "okhttp3.Response.close():java.lang.IllegalStateException"
      - "okhttp3.Request.Builder.build():java.lang.IllegalStateException"
      - "okhttp3.Request.Builder.url(kotlin.String):java.lang.NullPointerException,java.lang.IllegalArgumentException"
      - "okhttp3.Request.Builder.post(okhttp3.RequestBody):java.lang.NullPointerException,java.lang.IllegalArgumentException"
      - "okhttp3.Request.Builder.method(kotlin.String, okhttp3.RequestBody?):java.lang.NullPointerException,java.lang.IllegalArgumentException"
      - "okhttp3.Request.Builder.url(kotlin.String):java.lang.NullPointerException,java.lang.IllegalArgumentException"
      - "okhttp3.Interceptor.Chain.proceed(okhttp3.Request):java.io.IOException"
      - "okhttp3.RequestBody.writeTo(okio.BufferedSink):java.io.IOException"
      - "okio.BufferedSink.close():java.io.IOException"
      - "okio.Okio.buffer(okio.Sink):java.lang.NullPointerException"
      # endregion
      # region OpenTracing
      - "io.opentracing.Scope.close():java.io.IOException"
      # endregion
      # region Gson
      - "com.google.gson.JsonParser.parseString(kotlin.String):com.google.gson.JsonParseException"
      # endregion
      # region Kotlin Invoke
      - "io.opentracing.Span.invoke():java.lang.Exception"
      - "kotlin.Function0.invoke():java.lang.Exception"
      - "kotlin.Function1.invoke():java.lang.Exception"
      - "kotlin.Function1.invoke(android.app.Fragment):java.lang.Exception"
      - "kotlin.Function1.invoke(android.view.MotionEvent):java.lang.Exception"
      - "kotlin.Function1.invoke(androidx.fragment.app.Fragment):java.lang.Exception"
      - "kotlin.Function1.invoke(kotlin.Any):java.lang.Exception"
      - "kotlin.Function2.invoke(kotlin.Int, kotlin.Throwable?):java.lang.Exception"
      - "kotlin.Function1.invoke(kotlin.String):java.lang.Exception"
      - "kotlin.Function1.invoke(java.io.Closeable):java.lang.Exception"
      - "kotlin.Function1.invoke(com.datadog.android.sqldelight.TransactionWithSpanAndWithoutReturn):java.lang.Exception"
      # endregion
    knownSafeCalls:
      # region Java Collections
      - "java.util.ArrayList.forEach(kotlin.Function1)"
      - "java.util.concurrent.CopyOnWriteArraySet.toTypedArray()"
      - "java.util.LinkedList.addFirst(android.view.View)"
      - "java.util.LinkedList.add(com.datadog.android.privacy.TrackingConsentProviderCallback)"
      - "java.util.LinkedList.clear()"
      - "java.util.LinkedList.forEach(kotlin.Function1)"
      - "java.util.LinkedList.isEmpty()"
      - "java.util.LinkedList.isNotEmpty()"
      - "java.util.LinkedList.add(android.view.View)"
      - "java.util.WeakHashMap.containsKey(kotlin.Any)"
      - "java.util.WeakHashMap.remove(kotlin.Any)"
      - "java.util.WeakHashMap.remove(android.app.Activity)"
      # endregion
      # region Java concurrency
      - "java.util.concurrent.TimeUnit.HOURS.toMillis(kotlin.Long)"
      - "java.util.concurrent.TimeUnit.HOURS.toNanos(kotlin.Long)"
      - "java.util.concurrent.TimeUnit.MINUTES.toMillis(kotlin.Long)"
      - "java.util.concurrent.TimeUnit.MINUTES.toNanos(kotlin.Long)"
      - "java.util.concurrent.TimeUnit.SECONDS.toMillis(kotlin.Long)"
      - "java.util.concurrent.TimeUnit.SECONDS.toNanos(kotlin.Long)"
      - "java.util.concurrent.TimeUnit.MICROSECONDS.toMillis(kotlin.Long)"
      - "java.util.concurrent.TimeUnit.MILLISECONDS.toNanos(kotlin.Long)"
      - "java.util.concurrent.TimeUnit.NANOSECONDS.toMillis(kotlin.Long)"
      - "java.util.concurrent.atomic.AtomicBoolean.compareAndSet(kotlin.Boolean, kotlin.Boolean)"
      - "java.util.concurrent.atomic.AtomicBoolean.get()"
      - "java.util.concurrent.atomic.AtomicBoolean.getAndSet(kotlin.Boolean)"
      - "java.util.concurrent.atomic.AtomicBoolean.set(kotlin.Boolean)"
      - "java.util.concurrent.atomic.AtomicInteger.decrementAndGet()"
      - "java.util.concurrent.atomic.AtomicInteger.incrementAndGet()"
      - "java.util.concurrent.atomic.AtomicLong.get()"
      - "java.util.concurrent.atomic.AtomicLong.set(kotlin.Long)"
      - "java.util.concurrent.atomic.AtomicReference.compareAndSet(io.opentracing.Tracer, io.opentracing.Tracer)"
      - "java.util.concurrent.atomic.AtomicReference.get()"
      - "java.util.concurrent.atomic.AtomicReference.set(io.opentracing.Tracer)"
      - "java.util.concurrent.atomic.AtomicReference.set(com.datadog.android.rum.internal.domain.RumContext)"
      - "java.util.concurrent.CopyOnWriteArraySet.add(kotlin.String)"
      - "java.util.concurrent.CopyOnWriteArraySet.remove(kotlin.String)"
      - "java.util.concurrent.Executors.newSingleThreadExecutor()"
      - "java.util.concurrent.ExecutorService.shutdown()"
      - "java.util.concurrent.ExecutorService.shutdownNow()"
      - "java.util.concurrent.ScheduledThreadPoolExecutor.remove(java.lang.Runnable)"
      - "java.util.concurrent.ScheduledThreadPoolExecutor.shutdown()"
      - "java.util.concurrent.ScheduledThreadPoolExecutor.shutdownNow()"
      - "java.lang.Thread.interrupted()"
      - "java.lang.Thread.currentThread()"
      - "java.lang.Thread.getDefaultUncaughtExceptionHandler()"
      - "java.lang.Thread.setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)"
      # endregion
      # region Java misc
      - "java.lang.Class.hashCode()"
      - "java.lang.Class.isAssignableFrom(java.lang.Class)"
      - "java.lang.Runtime.getRuntime()"
      - "java.lang.Runtime.availableProcessors()"
      - "java.lang.System.identityHashCode(kotlin.Any)"
      - "java.lang.System.currentTimeMillis()"
      - "java.lang.System.getProperty(kotlin.String)"
      - "java.lang.System.nanoTime()"
      - "java.lang.Thread.UncaughtExceptionHandler.uncaughtException(java.lang.Thread, kotlin.Throwable)"
      - "java.lang.ref.Reference.get()"
      - "java.lang.ref.WeakReference.get()"
      - "java.lang.ref.WeakReference.clear()"
      - "java.math.BigInteger.toHexString()"
      - "java.math.BigInteger.toLong()"
      - "java.security.SecureRandom.nextFloat()"
      - "java.util.Properties.setProperty(kotlin.String, kotlin.String)"
      - "java.util.UUID.randomUUID()"
      # endregion
      # region Kotlin
      - "kotlin.Any.toString()"
      # endregion
      # region Kotlin Collections
      - "kotlin.Array.forEach(kotlin.Function1)"
      - "kotlin.Array.all(kotlin.Function1)"
      - "kotlin.Array.none(kotlin.Function1)"
      - "kotlin.Array.firstOrNull(kotlin.Function1)"
      - "kotlin.Array.filter(kotlin.Function1)"
      - "kotlin.Array.contentEquals(kotlin.Array?)"
      - "kotlin.Array.contentHashCode()"
      - "kotlin.Array.orEmpty()"
      - "kotlin.Array.sorted()"
      - "kotlin.Array.joinToString(kotlin.CharSequence, kotlin.CharSequence, kotlin.CharSequence, kotlin.Int, kotlin.CharSequence, kotlin.Function1?)"
      - "kotlin.collections.List.any(kotlin.Function1)"
      - "kotlin.collections.List.asSequence()"
      - "kotlin.collections.List.associateWith(kotlin.Function1)"
      - "kotlin.collections.List.firstOrNull()"
      - "kotlin.collections.List.firstOrNull(kotlin.Function1)"
      - "kotlin.collections.List.fold(kotlin.Long, kotlin.Function2)"
      - "kotlin.collections.List.fold(kotlin.String?, kotlin.Function2)"
      - "kotlin.collections.List.forEach(kotlin.Function1)"
      - "kotlin.collections.List.isEmpty()"
      - "kotlin.collections.List.getOrNull(kotlin.Int)"
      - "kotlin.collections.List.joinToString(kotlin.CharSequence, kotlin.CharSequence, kotlin.CharSequence, kotlin.Int, kotlin.CharSequence, kotlin.Function1?)"
      - "kotlin.collections.List.lastOrNull(kotlin.Function1)"
      - "kotlin.collections.List.lastOrNull()"
      - "kotlin.collections.List.map(kotlin.Function1)"
      - "kotlin.collections.List.mapNotNull(kotlin.Function1)"
      - "kotlin.collections.List.take(kotlin.Int)"
      - "kotlin.collections.List.sumOf(kotlin.Function1)"
      - "kotlin.collections.List.toCharArray()"
      - "kotlin.collections.List.toMap()"
      - "kotlin.collections.Map.filterKeys(kotlin.Function1)"
      - "kotlin.collections.Map.filterValues(kotlin.Function1)"
      - "kotlin.collections.Map.isEmpty()"
      - "kotlin.collections.Map.isNotEmpty()"
      - "kotlin.collections.Map.map(kotlin.Function1)"
      - "kotlin.collections.Map.mapKeys(kotlin.Function1)"
      - "kotlin.collections.Map.mapNotNull(kotlin.Function1)"
      - "kotlin.collections.Map.mapValues(kotlin.Function1)"
      - "kotlin.collections.Map.toMutableMap()"
      - "kotlin.collections.MutableIterator.hasNext()"
      - "kotlin.collections.MutableList.add(com.datadog.android.core.internal.persistence.Batch)"
      - "kotlin.collections.MutableList.add(com.datadog.android.plugin.DatadogPlugin)"
      - "kotlin.collections.MutableList.add(com.datadog.android.rum.internal.domain.scope.RumScope)"
      - "kotlin.collections.MutableList.add(java.io.File)"
      - "kotlin.collections.MutableList.add(java.lang.ref.WeakReference)"
      - "kotlin.collections.MutableList.add(kotlin.ByteArray)"
      - "kotlin.collections.MutableList.add(kotlin.String)"
      - "kotlin.collections.MutableList.clear()"
      - "kotlin.collections.MutableList?.firstOrNull(kotlin.Function1)"
      - "kotlin.collections.MutableList.firstOrNull(kotlin.Function1)"
      - "kotlin.collections.MutableList.forEach(kotlin.Function1)"
      - "kotlin.collections.MutableList.isEmpty()"
      - "kotlin.collections.MutableList.iterator()"
      - "kotlin.collections.MutableList.joinToString(kotlin.CharSequence, kotlin.CharSequence, kotlin.CharSequence, kotlin.Int, kotlin.CharSequence, kotlin.Function1?)"
      - "kotlin.collections.MutableList.remove(java.io.File)"
      - "kotlin.collections.MutableList.remove(java.lang.ref.WeakReference)"
      - "kotlin.collections.MutableList.removeAll(kotlin.Function1)"
      - "kotlin.collections.MutableList.toSet()"
      - "kotlin.collections.MutableList.toTypedArray()"
      - "kotlin.collections.MutableMap.forEach(kotlin.Function1)"
      - "kotlin.collections.MutableMap.iterator()"
      - "kotlin.collections.MutableMap.isEmpty()"
      - "kotlin.collections.MutableMap.isNotEmpty()"
      - "kotlin.collections.MutableMap.map(kotlin.Function1)"
      - "kotlin.collections.MutableMap.put(kotlin.String, kotlin.Any?)"
      - "kotlin.collections.MutableMap.putAll(kotlin.collections.Map)"
      - "kotlin.collections.MutableMap.remove(kotlin.String)"
      - "kotlin.collections.MutableMap.remove(com.datadog.android.rum.internal.vitals.VitalListener)"
      - "kotlin.collections.MutableSet.add(kotlin.String)"
      - "kotlin.collections.MutableSet.filter(kotlin.Function1)"
      - "kotlin.collections.MutableSet.forEach(kotlin.Function1)"
      - "kotlin.collections.MutableSet.joinToString(kotlin.CharSequence, kotlin.CharSequence, kotlin.CharSequence, kotlin.Int, kotlin.CharSequence, kotlin.Function1?)"
      - "kotlin.sequences.Sequence.filter(kotlin.Function1)"
      - "kotlin.sequences.Sequence.forEach(kotlin.Function1)"
      # endregion
      # region Primitives
      - "kotlin.Boolean.hashCode()"
      - "kotlin.Double.isNaN()"
      - "kotlin.Double.rangeTo(kotlin.Double)"
      - "kotlin.Double.toLong()"
      - "kotlin.Int.toLong()"
      - "kotlin.Long.toDouble()"
      - "kotlin.Long.toInt()"
      - "kotlin.Long.coerceIn(kotlin.Long, kotlin.Long)"
      - "kotlin.Long.hashCode()"
      - "kotlin.Number.toLong()"
      # endregion
      # region String
      - "kotlin.String.isNullOrBlank()"
      - "kotlin.String.isNullOrEmpty()"
      - "kotlin.String.isNotEmpty()"
      - "kotlin.String.toDoubleOrNull()"
      - "kotlin.String.toLongOrNull()"
      - "kotlin.String.toByteArray(java.nio.charset.Charset) "
      - "kotlin.String.isNotBlank()"
      - "kotlin.String.orEmpty()"
      - "kotlin.String.map(kotlin.Function1)"
      - "kotlin.String.toByteArray(java.nio.charset.Charset)"
      - "kotlin.String.matches(kotlin.text.Regex)"
      - "kotlin.String.startsWith(kotlin.String, kotlin.Boolean)"
      - "kotlin.String.count(kotlin.Function1)"
      - "kotlin.String.replace(kotlin.text.Regex, kotlin.String)"
      - "kotlin.String.replace(kotlin.Char, kotlin.Char, kotlin.Boolean)"
      - "kotlin.String.split(kotlin.CharArray, kotlin.Boolean, kotlin.Int)"
      - "kotlin.String.split(kotlin.Array, kotlin.Boolean, kotlin.Int)"
      - "kotlin.String.plus(kotlin.Any?)"
      - "kotlin.String.lowercase(java.util.Locale)"
      - "kotlin.String.uppercase(java.util.Locale)"
      - "kotlin.String.endsWith(kotlin.Char, kotlin.Boolean)"
      - "kotlin.String.substringBefore(kotlin.Char, kotlin.String)"
      - "kotlin.String.substringAfter(kotlin.Char, kotlin.String)"
      - "kotlin.String.substringAfterLast(kotlin.Char, kotlin.String)"
      - "kotlin.String.contains(kotlin.Char, kotlin.Boolean)"
      - "kotlin.String.indexOf(kotlin.Char, kotlin.Int, kotlin.Boolean)"
      - "kotlin.String.endsWith(kotlin.String, kotlin.Boolean)"
      - "kotlin.String.format(java.util.Locale?, kotlin.String, kotlin.Array)"
      - "kotlin.String.format(java.util.Locale?, kotlin.Array)"
      - "kotlin.text.Regex.matchEntire(kotlin.CharSequence)"
      # endregion
      # region Gson
      - "com.google.gson.JsonElement.fromJsonElement()"
      - "com.google.gson.JsonObject.add(kotlin.String, com.google.gson.JsonElement)"
      - "com.google.gson.JsonObject.addProperty(kotlin.String, kotlin.Number)"
      - "com.google.gson.JsonObject.addProperty(kotlin.String, kotlin.String)"
      - "com.google.gson.JsonObject.asMap()"
      - "com.google.gson.JsonObject.entrySet()"
      - "com.google.gson.JsonObject.get(kotlin.String)"
      - "com.google.gson.JsonObject.getAsJsonObject(kotlin.String)"
      - "com.google.gson.JsonObject.getAsJsonPrimitive(kotlin.String)"
      - "com.google.gson.JsonObject.remove(kotlin.String)"
      - "com.google.gson.JsonObject.has(kotlin.String)"
      - "com.google.gson.JsonObject.toString()"
      - "com.google.gson.JsonArray.add(com.google.gson.JsonElement)"
      # endregion
      # region Kronos
      - "com.lyft.kronos.AndroidClockFactory.createKronosClock(android.content.Context, kotlin.collections.List, kotlin.Long, kotlin.Long, com.lyft.kronos.SyncListener?, kotlin.Long, kotlin.Long)"
      - "com.lyft.kronos.Clock.getCurrentTimeMs()"
      # endregion
      # region OpenTracing
      - "io.opentracing.Span.context()"
      - "io.opentracing.Span.finish()"
      - "io.opentracing.Span.log(kotlin.collections.MutableMap)"
      - "io.opentracing.Span.setTag(kotlin.String, kotlin.String)"
      - "io.opentracing.Span.setTag(kotlin.String, kotlin.Number)"
      - "io.opentracing.Span.setError(kotlin.Throwable)"
      - "io.opentracing.Tracer.activeSpan()"
      - "io.opentracing.Tracer.activateSpan(io.opentracing.Span)"
      - "io.opentracing.Tracer.buildSpan(kotlin.String)"
      - "io.opentracing.Tracer.extract(io.opentracing.propagation.Format, io.opentracing.propagation.TextMapExtract)"
      - "io.opentracing.Tracer.inject(io.opentracing.SpanContext, io.opentracing.propagation.Format, io.opentracing.propagation.TextMapInject)"
      - "io.opentracing.Tracer.SpanBuilder.asChildOf(io.opentracing.SpanContext)"
      - "io.opentracing.Tracer.SpanBuilder.asChildOf(io.opentracing.Span)"
      - "io.opentracing.Tracer.SpanBuilder.start()"
      - "io.opentracing.util.GlobalTracer.isRegistered()"
      - "io.opentracing.util.GlobalTracer.get()"
      # endregion
      # region Androidx APIs
      - "androidx.core.view.GestureDetectorCompat.onTouchEvent(android.view.MotionEvent)"
      - "androidx.fragment.app.FragmentManager.registerFragmentLifecycleCallbacks(androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks, kotlin.Boolean)"
      - "androidx.fragment.app.FragmentManager.unregisterFragmentLifecycleCallbacks(androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks)"
      - "androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentAttached(androidx.fragment.app.FragmentManager, androidx.fragment.app.Fragment, android.content.Context)"
      - "androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentStarted(androidx.fragment.app.FragmentManager, androidx.fragment.app.Fragment)"
      - "androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentActivityCreated(androidx.fragment.app.FragmentManager, androidx.fragment.app.Fragment, android.os.Bundle?)"
      - "androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentResumed(androidx.fragment.app.FragmentManager, androidx.fragment.app.Fragment)"
      - "androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentPaused(androidx.fragment.app.FragmentManager, androidx.fragment.app.Fragment)"
      - "androidx.fragment.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentDestroyed(androidx.fragment.app.FragmentManager, androidx.fragment.app.Fragment)"
      - "androidx.recyclerview.widget.RecyclerView.getChildAdapterPosition(android.view.View)"
      - "androidx.navigation.NavController.addOnDestinationChangedListener(androidx.navigation.NavController.OnDestinationChangedListener)"
      - "androidx.navigation.NavController.removeOnDestinationChangedListener(androidx.navigation.NavController.OnDestinationChangedListener)"
      - "androidx.work.Constraints.Builder()"
      - "androidx.work.Constraints.Builder.build()"
      - "androidx.work.Constraints.Builder.setRequiredNetworkType(androidx.work.NetworkType)"
      - "androidx.work.ListenableWorker.Result.success()"
      - "androidx.work.OneTimeWorkRequest.Builder(java.lang.Class)"
      - "androidx.work.OneTimeWorkRequest.Builder.addTag(kotlin.String)"
      - "androidx.work.OneTimeWorkRequest.Builder.build()"
      - "androidx.work.OneTimeWorkRequest.Builder.setConstraints(androidx.work.Constraints)"
      - "androidx.work.OneTimeWorkRequest.Builder.setInitialDelay(kotlin.Long, java.util.concurrent.TimeUnit)"
      - "androidx.work.WorkManager.getInstance(android.content.Context)"
      - "androidx.work.WorkManager.cancelAllWorkByTag(kotlin.String)"
      - "androidx.lifecycle.Lifecycle.addObserver(androidx.lifecycle.LifecycleObserver)"
      - "androidx.lifecycle.Lifecycle.removeObserver(androidx.lifecycle.LifecycleObserver)"
      # endregion
      # region Android Webview APIs
      - "android.webkit.ConsoleMessage.message()"
      - "android.webkit.ConsoleMessage.messageLevel()"
      - "android.webkit.ConsoleMessage.sourceId()"
      - "android.webkit.ConsoleMessage.lineNumber()"
      - "android.webkit.ConsoleMessage.MessageLevel.toLogLevel()"
      - "android.webkit.WebViewClient.onPageStarted(android.webkit.WebView, kotlin.String, android.graphics.Bitmap)"
      - "android.webkit.WebViewClient.onPageFinished(android.webkit.WebView, kotlin.String)"
      - "android.webkit.WebViewClient.onReceivedError(android.webkit.WebView, kotlin.Int, kotlin.String, kotlin.String)"
      - "android.webkit.WebViewClient.onReceivedError(android.webkit.WebView, android.webkit.WebResourceRequest, android.webkit.WebResourceError)"
      - "android.webkit.WebViewClient.onReceivedHttpError(android.webkit.WebView, android.webkit.WebResourceRequest, android.webkit.WebResourceResponse)"
      - "android.webkit.WebViewClient.onReceivedSslError(android.webkit.WebView, android.webkit.SslErrorHandler, android.net.http.SslError)"
      # endregion
      # region Android APIs
      - "android.app.Application.registerActivityLifecycleCallbacks(android.app.Application.ActivityLifecycleCallbacks)"
      - "android.app.Application.unregisterActivityLifecycleCallbacks(android.app.Application.ActivityLifecycleCallbacks)"
      - "android.app.Activity.findNavControllerOrNull()"
      - "android.app.Activity.getSystemService(kotlin.String)"
      - "android.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentActivityCreated(android.app.FragmentManager, android.app.Fragment, android.os.Bundle)"
      - "android.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentAttached(android.app.FragmentManager, android.app.Fragment, android.content.Context)"
      - "android.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentStarted(android.app.FragmentManager, android.app.Fragment)"
      - "android.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentResumed(android.app.FragmentManager, android.app.Fragment)"
      - "android.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentPaused(android.app.FragmentManager, android.app.Fragment)"
      - "android.app.FragmentManager.FragmentLifecycleCallbacks.onFragmentDestroyed(android.app.FragmentManager, android.app.Fragment)"
      - "android.app.FragmentManager.registerFragmentLifecycleCallbacks(android.app.FragmentManager.FragmentLifecycleCallbacks, kotlin.Boolean)"
      - "android.app.FragmentManager.unregisterFragmentLifecycleCallbacks(android.app.FragmentManager.FragmentLifecycleCallbacks)"
      - "android.content.Context.registerReceiver(android.content.BroadcastReceiver?, android.content.IntentFilter)"
      - "android.content.Context.getSystemService(kotlin.String)"
      - "android.content.Context.unregisterReceiver(android.content.BroadcastReceiver)"
      - "android.content.IntentFilter.addAction(kotlin.String)"
      - "android.content.Intent.getIntExtra(kotlin.String, kotlin.Int)"
      - "android.content.res.AssetManager.open(kotlin.String, kotlin.Int)"
      - "android.database.DatabaseErrorHandler.onCorruption(android.database.sqlite.SQLiteDatabase)"
      - "android.net.ConnectivityManager.NetworkCallback.onCapabilitiesChanged(android.net.Network, android.net.NetworkCapabilities)"
      - "android.net.ConnectivityManager.NetworkCallback.onLost(android.net.Network)"
      - "android.net.ConnectivityManager.getNetworkCapabilities(android.net.Network?)"
      - "android.net.NetworkCapabilities.hasTransport(kotlin.Int)"
      - "android.os.Bundle.get(kotlin.String)"
      - "android.os.Bundle.keySet()"
      - "android.os.Handler.post(java.lang.Runnable)"
      - "android.os.Handler.postDelayed(java.lang.Runnable, kotlin.Long)"
      - "android.os.Handler.removeCallbacks(java.lang.Runnable)"
      - "android.os.Looper.getMainLooper()"
      - "android.os.Looper.setMessageLogging(android.util.Printer?)"
      - "android.os.Process.myPid()"
      - "android.os.SystemClock.elapsedRealtime()"
      - "android.os.Process.getStartElapsedRealtime()"
      - "android.util.Log.e(kotlin.String?, kotlin.String)"
      - "android.util.Log.e(kotlin.String?, kotlin.String?, kotlin.Throwable?)"
      - "android.util.Log.getStackTraceString(kotlin.Throwable?)"
      - "android.view.Window.Callback.dispatchTouchEvent(android.view.MotionEvent)"
      - "android.view.Window.Callback.onMenuItemSelected(kotlin.Int, android.view.MenuItem)"
      - "android.view.Window.Callback.dispatchKeyEvent(android.view.KeyEvent)"
      - "android.view.Choreographer.postFrameCallback(android.view.Choreographer.FrameCallback)"
      - "android.view.MotionEvent.recycle()"
      - "android.view.ViewTreeObserver.addOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)"
      - "android.view.ViewTreeObserver.removeOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)"
      - "android.view.ViewGroup.getChildAt(kotlin.Int)"
      - "android.view.ViewTreeObserver.addOnGlobalLayoutListener()"
      - "android.view.ViewTreeObserver.removeOnGlobalLayoutListener()"
      # endregion
      # region OkHttp
      - "okhttp3.Call.request()"
      - "okhttp3.Interceptor.Chain.request()"
      - "okhttp3.EventListener.callStart(okhttp3.Call)"
      - "okhttp3.EventListener.dnsStart(okhttp3.Call, kotlin.String)"
      - "okhttp3.EventListener.dnsEnd(okhttp3.Call, kotlin.String, kotlin.collections.MutableList)"
      - "okhttp3.EventListener.connectStart(okhttp3.Call, java.net.InetSocketAddress, java.net.Proxy)"
      - "okhttp3.EventListener.secureConnectStart(okhttp3.Call)"
      - "okhttp3.EventListener.secureConnectEnd(okhttp3.Call, okhttp3.Handshake?)"
      - "okhttp3.EventListener.connectEnd(okhttp3.Call, java.net.InetSocketAddress, java.net.Proxy, okhttp3.Protocol?)"
      - "okhttp3.EventListener.connectFailed(okhttp3.Call)"
      - "okhttp3.EventListener.responseHeadersStart(okhttp3.Call)"
      - "okhttp3.EventListener.responseHeadersEnd(okhttp3.Call, okhttp3.Response)"
      - "okhttp3.EventListener.responseBodyStart(okhttp3.Call)"
      - "okhttp3.EventListener.responseBodyEnd(okhttp3.Call, kotlin.Long)"
      - "okhttp3.EventListener.callEnd(okhttp3.Call)"
      - "okhttp3.EventListener.callFailed(okhttp3.Call, java.io.IOException)"
      - "okhttp3.HttpUrl.host()"
      - "okhttp3.HttpUrl.url()"
      - "okhttp3.HttpUrl.parse(kotlin.String)"
      - "okhttp3.Headers.toMultimap()"
      - "okhttp3.Response.code()"
      - "okhttp3.Response.header(kotlin.String)"
      - "okhttp3.ResponseBody.contentLength()"
      - "okhttp3.Request.body()"
      - "okhttp3.Request.header(kotlin.String)"
      - "okhttp3.Request.headers()"
      - "okhttp3.Request.newBuilder()"
      - "okhttp3.Request.tag(java.lang.Class)"
      - "okhttp3.Request.method()"
      - "okhttp3.Request.url()"
      - "okhttp3.RequestBody.create(okhttp3.MediaType?, kotlin.ByteArray)"
      - "okhttp3.RequestBody.contentLength()"
      - "okhttp3.RequestBody.contentType()"
      - "okhttp3.Call.Factory.newCall(okhttp3.Request)"
      - "okhttp3.OkHttpClient.Builder()"
      - "okhttp3.OkHttpClient.Builder.build()"
      - "okhttp3.OkHttpClient.Builder.addInterceptor(okhttp3.Interceptor)"
      - "okhttp3.OkHttpClient.Builder.callTimeout(kotlin.Long, java.util.concurrent.TimeUnit)"
      - "okhttp3.OkHttpClient.Builder.eventListenerFactory(okhttp3.EventListener.Factory)"
      - "okhttp3.OkHttpClient.Builder.protocols(kotlin.collections.MutableList)"
      - "okhttp3.OkHttpClient.Builder.connectionSpecs(kotlin.collections.MutableList)"
      - "okhttp3.OkHttpClient.Builder.proxy(java.net.Proxy?)"
      - "okhttp3.OkHttpClient.Builder.proxyAuthenticator(okhttp3.Authenticator)"
      - "okhttp3.OkHttpClient.Builder.writeTimeout(kotlin.Long, java.util.concurrent.TimeUnit)"
      - "okhttp3.Request.Builder()"
      - "okhttp3.Request.Builder.addHeader(kotlin.String, kotlin.String)"
      - "okhttp3.Request.Builder.removeHeader(kotlin.String)"
      - "okhttp3.Request.Builder.header(kotlin.String, kotlin.String)"
      # endregion
      # region Glide
      - "com.bumptech.glide.integration.okhttp3.OkHttpUrlLoader.Factory(okhttp3.Call.Factory)"
      - "com.bumptech.glide.Registry.replace(java.lang.Class, java.lang.Class, com.bumptech.glide.load.model.ModelLoaderFactory)"
      - "com.bumptech.glide.GlideBuilder.setDiskCacheExecutor(com.bumptech.glide.load.engine.executor.GlideExecutor?)"
      - "com.bumptech.glide.GlideBuilder.setSourceExecutor(com.bumptech.glide.load.engine.executor.GlideExecutor?)"
      - "com.bumptech.glide.load.engine.executor.GlideExecutor.Builder.setUncaughtThrowableStrategy(com.bumptech.glide.load.engine.executor.GlideExecutor.UncaughtThrowableStrategy)"
      - "com.bumptech.glide.load.engine.executor.GlideExecutor.Builder.build()"
      # endregion
      # region RxJava
      - "io.reactivex.rxjava3.core.Completable.doOnError(io.reactivex.rxjava3.functions.Consumer)"
      - "io.reactivex.rxjava3.core.Flowable.doOnError(io.reactivex.rxjava3.functions.Consumer)"
      - "io.reactivex.rxjava3.core.Maybe.doOnError(io.reactivex.rxjava3.functions.Consumer)"
      - "io.reactivex.rxjava3.core.Observable.doOnError(io.reactivex.rxjava3.functions.Consumer)"
      - "io.reactivex.rxjava3.core.Single.doOnError(io.reactivex.rxjava3.functions.Consumer)"
      # endregion
      # region SQLDelight
      - "com.squareup.sqldelight.android.AndroidSqliteDriver.Callback.onCorruption(androidx.sqlite.db.SupportSQLiteDatabase)"
      # endregion
      # region Internal extensions
      - "kotlin.Any.toJsonElement()"
      - "kotlin.Any.resolveViewUrl()"
      - "android.content.ComponentName.resolveViewUrl()"
      - "android.view.View.targetClassName()"
      - "kotlin.String.toErrorMethod()"
      - "kotlin.String.toMethod()"
      - "java.io.File.canReadSafe()"
      - "java.io.File.canWriteSafe()"
      - "java.io.File.deleteSafe()"
      - "java.io.File.existsSafe()"
      - "java.io.File.isDirectorySafe()"
      - "java.io.File.isFileSafe()"
      - "java.io.File.lengthSafe()"
      - "java.io.File.listFilesSafe()"
      - "java.io.File.listFilesSafe(java.io.FileFilter)"
      - "java.io.File.readTextSafe(java.nio.charset.Charset)"
      - "java.io.File.readLinesSafe(java.nio.charset.Charset)"
      - "java.io.File.mkdirsSafe()"
      - "java.io.File.renameToSafe(java.io.File)"
      - "kotlin.ByteArray.copyTo(kotlin.Int, kotlin.ByteArray, kotlin.Int, kotlin.Int)"
      - "java.util.concurrent.ThreadPoolExecutor.waitToIdle(kotlin.Long)"
      - "io.opentracing.SpanContext.toTraceId()"
      - "io.opentracing.SpanContext.toSpanId()"
      - "kotlin.Long.asTime()"
      - "kotlin.Throwable.stackTraceToString()"
      - "kotlin.Throwable.loggableStackTrace()"
      - "kotlin.collections.Map.toJsonObject()"
      - "kotlin.collections.Iterable.toJsonArray()"
      - "android.app.Activity.findNavControllerOrNull(kotlin.Int)"
      #endregion
