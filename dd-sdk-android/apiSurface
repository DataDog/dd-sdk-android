object com.datadog.android.Datadog
  DEPRECATED const val DATADOG_US: String
  DEPRECATED const val DATADOG_EU: String
  fun initialize(android.content.Context, DatadogConfig)
  DEPRECATED fun initialize(android.content.Context, String, String? = null)
  DEPRECATED fun setEndpointUrl(String, com.datadog.android.log.EndpointUpdateStrategy)
  fun isInitialized(): Boolean
  fun setVerbosity(Int)
  fun setUserInfo(String? = null, String? = null, String? = null)
class com.datadog.android.DatadogConfig
  class Builder
    constructor(String, java.util.UUID)
    constructor(String)
    constructor(String, String)
    fun build(): DatadogConfig
    fun setLogsEnabled(Boolean): Builder
    fun setTracesEnabled(Boolean): Builder
    fun setCrashReportsEnabled(Boolean): Builder
    fun setRumEnabled(Boolean): Builder
    fun setServiceName(String): Builder
    fun setEnvironmentName(String): Builder
    fun useEUEndpoints(): Builder
    fun useUSEndpoints(): Builder
    fun useCustomLogsEndpoint(String): Builder
    fun useCustomTracesEndpoint(String): Builder
    fun useCustomCrashReportsEndpoint(String): Builder
    fun useCustomRumEndpoint(String): Builder
    fun trackGestures(Array<com.datadog.android.rum.tracking.ViewAttributesProvider> = emptyArray()): Builder
    fun useViewTrackingStrategy(com.datadog.android.rum.tracking.ViewTrackingStrategy): Builder
  companion object
object com.datadog.android.DatadogEndpoint
  const val LOGS_US: String
  const val LOGS_EU: String
  const val TRACES_US: String
  const val TRACES_EU: String
  const val RUM_US: String
  const val RUM_EU: String
class com.datadog.android.DatadogInterceptor : okhttp3.Interceptor
DEPRECATED enum com.datadog.android.log.EndpointUpdateStrategy
  - DISCARD_OLD_DATA
  - SEND_OLD_DATA_TO_NEW_ENDPOINT
object com.datadog.android.log.LogAttributes
  const val APPLICATION_PACKAGE: String
  const val APPLICATION_VERSION: String
  const val DATE: String
  const val DB_INSTANCE: String
  const val DB_OPERATION: String
  const val DB_STATEMENT: String
  const val DB_USER: String
  const val DD_SPAN_ID: String
  const val DD_TRACE_ID: String
  const val DURATION: String
  const val ERROR_KIND: String
  const val ERROR_MESSAGE: String
  const val ERROR_STACK: String
  const val HOST: String
  const val HTTP_METHOD: String
  const val HTTP_REFERRER: String
  const val HTTP_REQUEST_ID: String
  const val HTTP_STATUS_CODE: String
  const val HTTP_URL: String
  const val HTTP_USERAGENT: String
  const val HTTP_VERSION: String
  const val LOGGER_METHOD_NAME: String
  const val LOGGER_NAME: String
  const val LOGGER_THREAD_NAME: String
  const val LOGGER_VERSION: String
  const val MESSAGE: String
  const val NETWORK_CARRIER_ID: String
  const val NETWORK_CARRIER_NAME: String
  const val NETWORK_CLIENT_IP: String
  const val NETWORK_CLIENT_PORT: String
  const val NETWORK_CONNECTIVITY: String
  const val NETWORK_DOWN_KBPS: String
  const val NETWORK_SIGNAL_STRENGTH: String
  const val NETWORK_UP_KBPS: String
  const val RUM_APPLICATION_ID: String
  const val RUM_SESSION_ID: String
  const val RUM_VIEW_ID: String
  const val SERVICE_NAME: String
  const val SOURCE: String
  const val STATUS: String
  const val USR_EMAIL: String
  const val USR_ID: String
  const val USR_NAME: String
class com.datadog.android.log.Logger
  fun v(String, Throwable? = null, Map<String, Any?> = emptyMap())
  fun d(String, Throwable? = null, Map<String, Any?> = emptyMap())
  fun i(String, Throwable? = null, Map<String, Any?> = emptyMap())
  fun w(String, Throwable? = null, Map<String, Any?> = emptyMap())
  fun e(String, Throwable? = null, Map<String, Any?> = emptyMap())
  fun wtf(String, Throwable? = null, Map<String, Any?> = emptyMap())
  fun log(Int, String, Throwable? = null, Map<String, Any?> = emptyMap())
  class Builder
    fun build(): Logger
    fun setServiceName(String): Builder
    fun setDatadogLogsEnabled(Boolean): Builder
    fun setLogcatLogsEnabled(Boolean): Builder
    fun setNetworkInfoEnabled(Boolean): Builder
    fun setLoggerName(String): Builder
    fun setBundleWithTraceEnabled(Boolean): Builder
    fun setBundleWithRumEnabled(Boolean): Builder
    fun setSampleRate(Float): Builder
  fun addAttribute(String, Boolean)
  fun addAttribute(String, Int)
  fun addAttribute(String, Long)
  fun addAttribute(String, Float)
  fun addAttribute(String, Double)
  fun addAttribute(String, String?)
  fun addAttribute(String, java.util.Date?)
  fun addAttribute(String, com.google.gson.JsonObject?)
  fun addAttribute(String, com.google.gson.JsonArray?)
  fun removeAttribute(String)
  fun addTag(String, String)
  fun addTag(String)
  fun removeTag(String)
  fun removeTagsWithKey(String)
object com.datadog.android.rum.GlobalRum
  fun isRegistered(): Boolean
  fun registerIfAbsent(RumMonitor): Boolean
  fun registerIfAbsent(java.util.concurrent.Callable<RumMonitor>): Boolean
  fun get(): RumMonitor
object com.datadog.android.rum.RumAttributes
  const val APPLICATION_ID: String
  const val APPLICATION_PACKAGE: String
  const val APPLICATION_VERSION: String
  const val DATE: String
  const val DURATION: String
  const val ERROR_KIND: String
  const val ERROR_MESSAGE: String
  const val ERROR_ORIGIN: String
  const val ERROR_STACK: String
  const val EVT_CATEGORY: String
  const val EVT_ID: String
  const val EVT_NAME: String
  const val EVT_USER_ACTION_ID: String
  const val HTTP_METHOD: String
  const val HTTP_PERFORMANCE_CONNECT_DURATION: String
  const val HTTP_PERFORMANCE_CONNECT_START: String
  const val HTTP_PERFORMANCE_DNS_DURATION: String
  const val HTTP_PERFORMANCE_DNS_START: String
  const val HTTP_PERFORMANCE_DOWNLOAD_DURATION: String
  const val HTTP_PERFORMANCE_DOWNLOAD_START: String
  const val HTTP_PERFORMANCE_FIRST_BYTE_DURATION: String
  const val HTTP_PERFORMANCE_FIRST_BYTE_START: String
  const val HTTP_PERFORMANCE_REDIRECT_DURATION: String
  const val HTTP_PERFORMANCE_REDIRECT_START: String
  const val HTTP_PERFORMANCE_SSL_DURATION: String
  const val HTTP_PERFORMANCE_SSL_START: String
  const val HTTP_REFERRER: String
  const val HTTP_STATUS_CODE: String
  const val HTTP_URL: String
  const val HTTP_USERAGENT: String
  const val HTTP_VERSION: String
  const val NETWORK_BYTES_READ: String
  const val NETWORK_BYTES_WRITTEN: String
  const val RESOURCE_KIND: String
  const val RUM_DOCUMENT_VERSION: String
  const val SESSION_ID: String
  const val SOURCE: String
  const val TRACE_ID: String
  const val USER_EMAIL: String
  const val USER_ID: String
  const val USER_NAME: String
  const val VIEW_ID: String
  const val VIEW_MEASURES_ERROR_COUNT: String
  const val VIEW_MEASURES_RESOURCE_COUNT: String
  const val VIEW_MEASURES_USER_ACTION_COUNT: String
  const val VIEW_REFERRER: String
  const val VIEW_URL: String
  const val TAG_TARGET_CLASS_NAME: String
  const val TAG_TARGET_RESOURCE_ID: String
  const val TAG_TARGET_POSITION_IN_SCROLLABLE_CONTAINER: String
  const val TAG_TARGET_SCROLLABLE_CONTAINER_CLASS_NAME: String
  const val TAG_TARGET_SCROLLABLE_CONTAINER_RESOURCE_ID: String
  const val TAG_TARGET_TITLE: String
  const val TAG_GESTURE_DIRECTION: String
class com.datadog.android.rum.RumInterceptor : okhttp3.Interceptor
interface com.datadog.android.rum.RumMonitor
  fun startView(Any, String, Map<String, Any?> = emptyMap())
  fun stopView(Any, Map<String, Any?> = emptyMap())
  fun addUserAction(String, Map<String, Any?> = emptyMap())
  fun startResource(Any, String, String, Map<String, Any?> = emptyMap())
  fun stopResource(Any, RumResourceKind, Map<String, Any?> = emptyMap())
  fun stopResourceWithError(Any, String, String, Throwable)
  fun addError(String, String, Throwable?, Map<String, Any?>)
  class Builder
    fun build(): RumMonitor
enum com.datadog.android.rum.RumResourceKind
  constructor(String)
  - BEACON
  - FETCH
  - XHR
  - DOCUMENT
  - UNKNOWN
  - IMAGE
  - JS
  - FONT
  - CSS
  - MEDIA
  - OTHER
  companion object
abstract class com.datadog.android.rum.tracking.ActivityLifecycleTrackingStrategy : android.app.Application, ActivityLifecycleCallbacks, TrackingStrategy
  override fun register(android.content.Context)
  override fun unregister(android.content.Context?)
  override fun onActivityPaused(android.app.Activity)
  override fun onActivityStarted(android.app.Activity)
  override fun onActivityDestroyed(android.app.Activity)
  override fun onActivitySaveInstanceState(android.app.Activity, android.os.Bundle)
  override fun onActivityStopped(android.app.Activity)
  override fun onActivityCreated(android.app.Activity, android.os.Bundle?)
  override fun onActivityResumed(android.app.Activity)
  protected fun convertToRumAttributes(android.os.Bundle?): Map<String, Any?>
  companion object
class com.datadog.android.rum.tracking.ActivityViewTrackingStrategy : ActivityLifecycleTrackingStrategy, ViewTrackingStrategy
  constructor(Boolean)
  override fun onActivityResumed(android.app.Activity)
  override fun onActivityPaused(android.app.Activity)
class com.datadog.android.rum.tracking.FragmentViewTrackingStrategy : ActivityLifecycleTrackingStrategy, ViewTrackingStrategy
  constructor(Boolean)
  override fun onActivityResumed(android.app.Activity)
  override fun onActivityPaused(android.app.Activity)
class com.datadog.android.rum.tracking.JetpackViewAttributesProvider : ViewAttributesProvider
  override fun extractAttributes(android.view.View, MutableMap<String, Any?>)
class com.datadog.android.rum.tracking.NavigationViewTrackingStrategy : ActivityLifecycleTrackingStrategy, ViewTrackingStrategy, androidx.navigation.NavController, OnDestinationChangedListener
  constructor(Int, Boolean)
  override fun onActivityStarted(android.app.Activity)
  override fun onActivityPaused(android.app.Activity)
  override fun onActivityStopped(android.app.Activity)
  override fun onDestinationChanged(androidx.navigation.NavController, androidx.navigation.NavDestination, android.os.Bundle?)
  companion object
interface com.datadog.android.rum.tracking.TrackingStrategy
  fun register(android.content.Context)
  fun unregister(android.content.Context?)
interface com.datadog.android.rum.tracking.ViewAttributesProvider
  fun extractAttributes(android.view.View, MutableMap<String, Any?>)
interface com.datadog.android.rum.tracking.ViewTrackingStrategy : TrackingStrategy
open class com.datadog.android.rum.webview.RumWebChromeClient : android.webkit.WebChromeClient
  constructor()
  override fun onConsoleMessage(android.webkit.ConsoleMessage?): Boolean
  companion object
open class com.datadog.android.rum.webview.RumWebViewClient : android.webkit.WebViewClient
  override fun onPageStarted(android.webkit.WebView?, String?, android.graphics.Bitmap?)
  override fun onPageFinished(android.webkit.WebView?, String?)
  override fun onReceivedError(android.webkit.WebView?, Int, String?, String?)
  override fun onReceivedError(android.webkit.WebView?, android.webkit.WebResourceRequest?, android.webkit.WebResourceError?)
  override fun onReceivedHttpError(android.webkit.WebView?, android.webkit.WebResourceRequest?, android.webkit.WebResourceResponse?)
  override fun onReceivedSslError(android.webkit.WebView?, android.webkit.SslErrorHandler?, android.net.http.SslError?)
  companion object
class com.datadog.android.tracing.AndroidTracer : datadog.opentracing.DDTracer
  override fun buildSpan(String): DDSpanBuilder
  class Builder
    fun build(): AndroidTracer
    fun setServiceName(String): Builder
    fun setPartialFlushThreshold(Int): Builder
    fun setBundleWithRumEnabled(Boolean): Builder
  companion object
    fun logThrowable(io.opentracing.Span, Throwable)
    fun logErrorMessage(io.opentracing.Span, String)
class com.datadog.android.tracing.TracingInterceptor : okhttp3.Interceptor
class com.datadog.tools.annotation.NoOpImplementation
