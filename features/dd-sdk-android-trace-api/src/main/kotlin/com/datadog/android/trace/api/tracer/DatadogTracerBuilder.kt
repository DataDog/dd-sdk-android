/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2016-Present Datadog, Inc.
 */
package com.datadog.android.trace.api.tracer

import com.datadog.android.trace.TracingHeaderType
import com.datadog.tools.annotation.NoOpImplementation
import java.util.Properties

/**
 * Builder interface for creating and configuring a [DatadogTracer] instance.
 */
@NoOpImplementation(publicNoOpImplementation = true)
interface DatadogTracerBuilder {
    /**
     * Constructs and returns an instance of [DatadogTracer] based on the current builder configuration.
     *
     * @return An instance of [DatadogTracer] configured with the options provided in the builder.
     */
    fun build(): DatadogTracer

    /**
     * Configures the builder with the provided set of properties.
     *
     * @param properties The properties to configure the Datadog Tracer with. These properties could define
     * specific behaviors or configurations that the tracer should utilize.
     * @return The updated instance of [DatadogTracerBuilder] to allow method chaining.
     */
    fun withProperties(properties: Properties): DatadogTracerBuilder

    /**
     * Configures the builder with the specified set of tracing header types. Tracing headers
     * define the standards used for propagating trace information across different components.
     *
     * @param tracingHeadersTypes A set of [TracingHeaderType] values representing the tracing
     * headers to be used.
     * @return The updated instance of [DatadogTracerBuilder] to allow method chaining.
     */
    fun withTracingHeadersTypes(tracingHeadersTypes: Set<TracingHeaderType>): DatadogTracerBuilder

    /**
     * Sets the service name for the tracer. The service name is a key identifier
     * associated with the traces generated by the tracer, typically representing
     * the application or microservice being traced.
     *
     * @param serviceName The name of the service to be associated with the tracer.
     * @return The updated instance of [DatadogTracerBuilder] to allow method chaining.
     */
    fun withServiceName(serviceName: String): DatadogTracerBuilder

    /**
     * Configures the builder to enable partial flushes when the number of spans in a specific trace
     * reaches the given threshold.
     *
     * @param partialFlushThreshold The minimum number of spans required to trigger a partial flush.
     * @return The updated instance of [DatadogTracerBuilder] to allow method chaining.
     */
    fun withPartialFlushMinSpans(partialFlushThreshold: Int): DatadogTracerBuilder

    /**
     * Configures the builder with a specific ID generation strategy.
     *
     * @param key The key representing the strategy to be used for generating IDs.
     * @param traceId128BitGenerationEnabled A flag indicating whether 128-bit trace ID generation should be enabled.
     * @return The updated instance of [DatadogTracerBuilder] to allow method chaining.
     */
    fun withIdGenerationStrategy(key: String, traceId128BitGenerationEnabled: Boolean): DatadogTracerBuilder

    /**
     * Configures the builder to use the specified custom sampler for determining
     * whether or not a span should be traced.
     *
     * @param samplerAdapter The custom sampling mechanism to be used.
     * @return The updated instance of [DatadogTracerBuilder] to allow method chaining.
     */
    fun withSampler(samplerAdapter: DatadogTracerSampler?): DatadogTracerBuilder
}
