/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache License Version 2.0.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2016-Present Datadog, Inc.
 */
package com.datadog.android.trace.api.tracer

import androidx.annotation.FloatRange
import com.datadog.android.trace.TracingHeaderType
import com.datadog.tools.annotation.NoOpImplementation

/**
 * Builder interface for creating and configuring a [DatadogTracer] instance.
 */
@NoOpImplementation(publicNoOpImplementation = true)
@SuppressWarnings("TooManyFunctions")
interface DatadogTracerBuilder {
    /**
     * Constructs and returns an instance of [DatadogTracer] based on the current builder configuration.
     *
     * @return An instance of [DatadogTracer] configured with the options provided in the builder.
     */
    fun build(): DatadogTracer

    /**
     * Configures the builder with the specified set of tracing header types. Tracing headers
     * define the standards used for propagating trace information across different components.
     *
     * @param tracingHeadersTypes A set of [TracingHeaderType] values representing the tracing
     * headers to be used.
     * @return The updated instance of [DatadogTracerBuilder] to allow method chaining.
     */
    fun withTracingHeadersTypes(tracingHeadersTypes: Set<TracingHeaderType>): DatadogTracerBuilder

    /**
     * Sets the service name for the tracer. The service name is a key identifier
     * associated with the traces generated by the tracer, typically representing
     * the application or microservice being traced.
     *
     * @param serviceName The name of the service to be associated with the tracer.
     * @return The updated instance of [DatadogTracerBuilder] to allow method chaining.
     */
    fun withServiceName(serviceName: String): DatadogTracerBuilder

    /**
     * Sets the sample rate of spans.
     * @param sampleRate the sample rate as a percentage between 0 and 100 (default is 100%)
     */
    fun withSampleRate(@FloatRange(from = 0.0, to = 100.0) sampleRate: Double): DatadogTracerBuilder

    /**
     * Configures the builder to enable partial flushes when the number of spans in a specific trace
     * reaches the given threshold.
     *
     * @param partialFlushMinSpans The minimum number of spans required to trigger a partial flush.
     * @return The updated instance of [DatadogTracerBuilder] to allow method chaining.
     */
    fun withPartialFlushMinSpans(partialFlushMinSpans: Int): DatadogTracerBuilder

    /**
     * Adds a global tag which will be appended to all spans created with the built tracer.
     * @param key the tag key
     * @param value the tag value
     */
    fun withTag(key: String, value: String): DatadogTracerBuilder

    /**
     * Enables the trace bundling with the current active RUM View. If this feature is enabled all
     * the spans from this moment on will be bundled with the current view information and you
     * will be able to see all the traces sent during a specific view in the RUM Explorer.
     * @param enabled true by default
     */
    fun setBundleWithRumEnabled(enabled: Boolean): DatadogTracerBuilder
}
