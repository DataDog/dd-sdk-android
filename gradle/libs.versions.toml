[versions]
# Commons
kotlin = "1.9.24"
kotlinSP = "1.9.24-1.0.20"
gson = "2.10.1"
okHttp = "4.12.0"
kronosNTP = "0.0.1-alpha11"
kotlinxSerialization = "1.6.3"

# Android
adapterDelegates = "4.3.2"
androidDesugaringSdk = "2.0.4"
androidxProfileinstaller = "1.4.1"
androidToolsPlugin = "8.9.1"
androidXAnnotations = "1.9.1"
androidXAppCompat = "1.4.2" # Next version will bring coroutines
androidXCollection = "1.4.5"
androidXComposeBom = "2023.10.01" # Next version will bring coroutines
androidXComposeCompilerExtension = "1.5.14"
androidXComposeNavigation = "2.6.0"
androidXComposeRuntime = "1.5.14"
androidXConstraintLayout = "2.0.4"
androidXCore = "1.3.1"
androidXFragment = "1.2.4"
androidXLeanback = "1.0.0"
androidXLifecycle = "2.8.7"
androidXMetrics = "1.0.0-beta02"
androidXMultidex = "2.0.1"
androidXNavigation = "2.7.7"
androidXRecyclerView = "1.3.2"
androidXWorkManager = "2.8.1" # Next version will bring coroutines
googleAccompanist = "0.20.2"
googleMaterial = "1.3.0"
dagger = "2.56.2"

# DD-TRACE-OT
openTracing = "0.32.0"

# JUnit
jUnit4 = "4.13.2"
jUnitJupiter = "5.9.3"
jUnitPlatform = "1.9.3"
jUnitVintage = "5.9.3"
jUnitMockitoExt = "5.4.0"
systemStubsJupiter = "2.1.6"

# Android JUnit
androidXJunitRunner = "1.5.0"
androidXJunitRules = "1.5.0"
androidXExtJunit = "1.1.5"
androidXJunitCore = "1.5.0"
espresso = "3.5.1"

# Tests Tools
assertJ = "3.18.1"
elmyr = "1.3.1"
mockitoKotlin = "5.1.0"
mockitoAndroid = "5.12.0"
kover = "0.7.6"
kspTesting = "1.5.0"

# Tools
detekt = "1.23.0"
dokka = "1.8.20"
unmock = "0.9.0"
robolectric = "4.4_r1-robolectric-r2"
androidLint = "31.0.2"

versionsGradlePlugin = "0.46.0"
nexusPublishGradlePlugin = "1.1.0"
datadogPlugin = "1.17.0"

kotlinPoet = "1.14.2"
kotlinGrammarParser = "0.1.0"
# version d4384e4d90 of com.github.drieks.antlr-kotlin:antlr-kotlin-runtime
# referenced by com.github.kotlinx.ast:grammar-kotlin-parser-antlr-kotlin-jvm cannot be found
# so explicitly overriding with the version which can be found
kotlinAntlrRuntime = "v0.1.0"
jsonSchemaValidator = "1.12.1"
binaryCompatibility = "0.17.0"
dependencyLicense = "0.3"
kotlinXmlBuilder = "1.9.3"

# Integrations
sqlDelight = "1.5.5"
coil = "1.0.0"
coilCompose = "2.1.0"
fresco = "2.3.0"
glide = "4.11.0"
picasso = "2.8"
room = "2.5.1"
rxJava3 = "3.0.0"
timber = "5.0.1"
coroutines = "1.4.2"
exoplayer = "2.19.1"
newPipeExtractor = "v0.24.6"

# Local Server
ktor = "2.3.13"
ktorServer = "3.0.0-rc-1"

# Otel
jctools = "3.3.0"
openTelemetry = "1.4.0"
# Only for internal benchmark use
openTelemetryBenchmark = "1.40.0"
re2j = "1.7"
material3Android = "1.1.2"
uiautomator = "2.3.0"
benchmarkMacroJunit4 = "1.3.4"
benchmark = "1.2.4"
benchmarkJunit4 = "1.3.4"
kotlinVersion = "2.0.20"


[libraries]

# Classpaths
# Gradle version catalog doesn't allow names to end with plugin, that is why strange names
androidToolsGradlePlugin = { module = "com.android.tools.build:gradle", version.ref = "androidToolsPlugin" }
kotlinGradlePlugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
kotlinSPGradlePlugin = { module = "com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin", version.ref = "kotlinSP" }
dokkaGradlePlugin = { module = "org.jetbrains.dokka:dokka-gradle-plugin", version.ref = "dokka" }
unmockGradlePlugin = { module = "com.github.bjoernq:unmockplugin", version.ref = "unmock" }
sqlDelightGradlePlugin = { module = "com.squareup.sqldelight:gradle-plugin", version.ref = "sqlDelight" }
binaryCompatibilityGradlePlugin = { module = "org.jetbrains.kotlinx:binary-compatibility-validator", version.ref = "binaryCompatibility" }
dependencyLicenseGradlePlugin = { module = "com.datadoghq:dependency-license", version.ref = "dependencyLicense" }
versionsGradlePlugin = { module = "com.github.ben-manes:gradle-versions-plugin", version.ref = "versionsGradlePlugin" }
kotlinxSerializationPlugin = { module = "org.jetbrains.kotlin:kotlin-serialization", version.ref = "kotlin" }
androidXBenchmarkGradlePlugin = { module = "androidx.benchmark:androidx.benchmark.gradle.plugin", version.ref = "benchmark" }


# Annotation processors
glideCompiler = { module = "com.github.bumptech.glide:compiler", version.ref = "glide" }
roomCompiler = { module = "androidx.room:room-compiler", version.ref = "room" }

# Common

kotlin = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
kotlinxSerializationJson = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerialization" }

okHttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okHttp" }
gson = { module = "com.google.code.gson:gson", version.ref = "gson" }
kronosNTP = { module = "com.lyft.kronos:kronos-android", version.ref = "kronosNTP" }
assertJ = { module = "org.assertj:assertj-core", version.ref = "assertJ" }

# Android libs
adapterDelegatesViewBinding = { module = "com.hannesdorfmann:adapterdelegates4-kotlin-dsl-viewbinding", version.ref = "adapterDelegates" }
androidDesugaringSdk = { module = "com.android.tools:desugar_jdk_libs", version.ref = "androidDesugaringSdk" }
androidXAnnotation = { module = "androidx.annotation:annotation", version.ref = "androidXAnnotations" }
androidXAppCompat = { module = "androidx.appcompat:appcompat", version.ref = "androidXAppCompat" }
androidXCollection = { module = "androidx.collection:collection", version.ref = "androidXCollection" }
androidXConstraintLayout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "androidXConstraintLayout" }
androidXCore = { module = "androidx.core:core", version.ref = "androidXCore" }
androidXCoreKtx = { module = "androidx.core:core-ktx", version.ref = "androidXCore" }
androidXProfileinstaller = { group = "androidx.profileinstaller", name = "profileinstaller", version.ref = "androidxProfileinstaller" }
androidXFragment = { module = "androidx.fragment:fragment", version.ref = "androidXFragment" }
androidXLeanback = { module = "androidx.leanback:leanback", version.ref = "androidXLeanback" }
androidXMetrics = { module = "androidx.metrics:metrics-performance", version.ref = "androidXMetrics" }
androidXMultidex = { module = "androidx.multidex:multidex", version.ref = "androidXMultidex" }
androidXNavigationFragment = { module = "androidx.navigation:navigation-fragment", version.ref = "androidXNavigation" }
androidXNavigationRuntime = { module = "androidx.navigation:navigation-runtime", version.ref = "androidXNavigation" }
androidXNavigationUIKtx = { module = "androidx.navigation:navigation-ui-ktx", version.ref = "androidXNavigation" }
androidXRecyclerView = { module = "androidx.recyclerview:recyclerview", version.ref = "androidXRecyclerView" }
androidXWorkManager = { module = "androidx.work:work-runtime", version.ref = "androidXWorkManager" }
androidXLifecycleCompose = { module = "androidx.lifecycle:lifecycle-runtime-compose", version.ref = "androidXLifecycle" }
androidXLifecycleLiveDataKtx = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "androidXLifecycle" }
androidXLifecycleViewModelKtx = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "androidXLifecycle" }
daggerLib = { module = "com.google.dagger:dagger", version.ref = "dagger" }
daggerCompiler = { module = "com.google.dagger:dagger-compiler", version.ref = "dagger" }
googleAccompanistAppCompatTheme = { module = "com.google.accompanist:accompanist-appcompat-theme", version.ref = "googleAccompanist" }
googleAccompanistPager = { module = "com.google.accompanist:accompanist-pager", version.ref = "googleAccompanist" }
googleAccompanistPagerIndicators = { module = "com.google.accompanist:accompanist-pager-indicators", version.ref = "googleAccompanist" }
googleMaterial = { module = "com.google.android.material:material", version.ref = "googleMaterial" }

androidXComposeBom = { module = "androidx.compose:compose-bom", version.ref = "androidXComposeBom" }
androidXComposeNavigation = { module = "androidx.navigation:navigation-compose", version.ref = "androidXComposeNavigation" }
androidXComposeRuntime = { module = "androidx.compose.runtime:runtime" }
androidXComposeUi = { module = "androidx.compose.ui:ui" }
androidXComposeUiTooling = { module = "androidx.compose.ui:ui-tooling" }
androidXComposeMaterial = { module = "androidx.compose.material:material" }
material3Android = { group = "androidx.compose.material3", name = "material3", version.ref = "material3Android" }

# DD-TRACE-OT
openTracingApi = { module = "io.opentracing:opentracing-api", version.ref = "openTracing" }
openTracingNoOp = { module = "io.opentracing:opentracing-noop", version.ref = "openTracing" }
openTracingUtil = { module = "io.opentracing:opentracing-util", version.ref = "openTracing" }

# Junit 4 (for buildSrc)
jUnit4 = { module = "junit:junit", version.ref = "jUnit4" }

# Junit 5
jUnitPlatform = { module = "org.junit.platform:junit-platform-launcher", version.ref = "jUnitPlatform" }
jUnitJupiter = { module = "org.junit.jupiter:junit-jupiter", version.ref = "jUnitJupiter" }
jUnitVintageEngine = { module = "org.junit.vintage:junit-vintage-engine", version.ref = "jUnitVintage" }
jUnitMockitoExt = { module = "org.mockito:mockito-junit-jupiter", version.ref = "jUnitMockitoExt" }

# Android JUnit
androidXTestCore = { module = "androidx.test:core", version.ref = "androidXJunitCore" }
# AndroidJUnitRunner and JUnit Rules
androidXTestRunner = { module = "androidx.test:runner", version.ref = "androidXJunitRunner" }
androidXTestRules = { module = "androidx.test:rules", version.ref = "androidXJunitRules" }
androidXTestJUnitExt = { module = "androidx.test.ext:junit", version.ref = "androidXExtJunit" }
# Espresso
androidXEspressoCore = { module = "androidx.test.espresso:espresso-core", version.ref = "espresso" }
androidXEspressoContrib = { module = "androidx.test.espresso:espresso-contrib", version.ref = "espresso" }
androidXEspressoIntents = { module = "androidx.test.espresso:espresso-intents", version.ref = "espresso" }
androidXEspressoWeb = { module = "androidx.test.espresso:espresso-web", version.ref = "espresso" }

# Test tools
elmyr = { module = "com.github.xgouchet.Elmyr:core", version.ref = "elmyr" }
elmyrInject = { module = "com.github.xgouchet.Elmyr:inject", version.ref = "elmyr" }
elmyrJUnit4 = { module = "com.github.xgouchet.Elmyr:junit4", version.ref = "elmyr" }
elmyrJUnit5 = { module = "com.github.xgouchet.Elmyr:junit5", version.ref = "elmyr" }
elmyrJVM = { module = "com.github.xgouchet.Elmyr:jvm", version.ref = "elmyr" }
mockitoAndroid = { module = "org.mockito:mockito-android", version.ref = "mockitoAndroid" }
mockitoKotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockitoKotlin" }
kotlinReflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kover = { module = "org.jetbrains.kotlinx:kover-gradle-plugin", version.ref = "kover" }
kspTesting = { module = "com.github.tschuchortdev:kotlin-compile-testing-ksp", version.ref = "kspTesting" }
androidLintTests = { module = "com.android.tools.lint:lint-tests", version.ref = "androidLint" }
systemStubsJupiter = { module = "uk.org.webcompere:system-stubs-jupiter", version.ref = "systemStubsJupiter" }

# Tools
detektCli = { module = "io.gitlab.arturbosch.detekt:detekt-cli", version.ref = "detekt" }
detektApi = { module = "io.gitlab.arturbosch.detekt:detekt-api", version.ref = "detekt" }
detektTest = { module = "io.gitlab.arturbosch.detekt:detekt-test", version.ref = "detekt" }
okHttpMock = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okHttp" }
robolectric = { module = "org.robolectric:android-all", version.ref = "robolectric" }
androidLintApi = { module = "com.android.tools.lint:lint-api", version.ref = "androidLint" }
androidLintChecks = { module = "com.android.tools.lint:lint-checks", version.ref = "androidLint" }

kotlinPoet = { module = "com.squareup:kotlinpoet", version.ref = "kotlinPoet" }
kotlinPoetKsp = { module = "com.squareup:kotlinpoet-ksp", version.ref = "kotlinPoet" }
kotlinSP = { module = "com.google.devtools.ksp:symbol-processing-api", version.ref = "kotlinSP" }
kotlinGrammarParser = { module = "com.github.kotlinx.ast:grammar-kotlin-parser-antlr-kotlin-jvm", version.ref = "kotlinGrammarParser" }
kotlinAntlrRuntime = { module = "com.github.drieks.antlr-kotlin:antlr-kotlin-runtime", version.ref = "kotlinAntlrRuntime" }
jsonSchemaValidator = { module = "com.github.everit-org.json-schema:org.everit.json.schema", version.ref = "jsonSchemaValidator" }
kotlinXmlBuilder = {module="org.redundent:kotlin-xml-builder", version.ref="kotlinXmlBuilder"}

# Integrations
sqlDelight = { module = "com.squareup.sqldelight:android-driver", version.ref = "sqlDelight" }
coil = { module = "io.coil-kt:coil", version.ref = "coil" }
coilCompose = { module = "io.coil-kt:coil-compose", version.ref = "coilCompose" }

frescoCore = { module = "com.facebook.fresco:fresco", version.ref = "fresco" }
frescoOkHttp3 = { module = "com.facebook.fresco:imagepipeline-okhttp3", version.ref = "fresco" }

glideAnnotations = { module = "com.github.bumptech.glide:annotations", version.ref = "glide" }
glideCore = { module = "com.github.bumptech.glide:glide", version.ref = "glide" }
glideOkHttp3 = { module = "com.github.bumptech.glide:okhttp3-integration", version.ref = "glide" }

picasso = { module = "com.squareup.picasso:picasso", version.ref = "picasso" }

room = { module = "androidx.room:room-runtime", version.ref = "room" }
rxJava3 = { module = "io.reactivex.rxjava3:rxjava", version.ref = "rxJava3" }
rxJava3Android = { module = "io.reactivex.rxjava3:rxandroid", version.ref = "rxJava3" }
timber = { module = "com.jakewharton.timber:timber", version.ref = "timber" }

coroutinesCore = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }

exoplayer = { module = "com.google.android.exoplayer:exoplayer", version.ref = "exoplayer" }
exoplayerDataSource = { module = "com.google.android.exoplayer:exoplayer-datasource", version.ref = "exoplayer" }
exoplayerOkHttp = { module = "com.google.android.exoplayer:extension-okhttp", version.ref = "exoplayer" }
newPipeExtractor = { module = "com.github.TeamNewPipe.NewPipeExtractor:extractor", version.ref = "newPipeExtractor" }

# Local Server
ktorCore = { module = "io.ktor:ktor", version.ref = "ktor" }
ktorGson = { module = "io.ktor:ktor-serialization-gson", version.ref = "ktor" }
ktorServerCore = { module = "io.ktor:ktor-server-core", version.ref = "ktorServer" }
ktorServerNetty = { module = "io.ktor:ktor-server-netty", version.ref = "ktorServer" }
ktorServerSSE = { module = "io.ktor:ktor-server-sse", version.ref = "ktorServer" }

# ktor client
ktorClientCore = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktorClientOkHttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktorContentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktorSerializationKotlinxJson = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktorClientMock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }

# Otel
jctools = { module = "org.jctools:jctools-core", version.ref = "jctools" }
openTelemetryApi = { module = "io.opentelemetry:opentelemetry-api", version.ref = "openTelemetry" }
openTelemetryApiBenchmark = { module = "io.opentelemetry:opentelemetry-api", version.ref = "openTelemetryBenchmark" }
openTelemetrySdkBenchmark = { module = "io.opentelemetry:opentelemetry-sdk", version.ref = "openTelemetryBenchmark" }
re2j = { module = "com.google.re2j:re2j", version.ref = "re2j" }
uiautomator = { group = "androidx.test.uiautomator", name = "uiautomator", version.ref = "uiautomator" }
benchmarkMacroJunit4 = { group = "androidx.benchmark", name = "benchmark-macro-junit4", version.ref = "benchmarkMacroJunit4" }
benchmarkJunit4 = { group = "androidx.benchmark", name = "benchmark-junit4", version.ref = "benchmarkJunit4" }

[bundles]

jUnit5 = [
    "jUnitPlatform",
    "jUnitJupiter",
    "jUnitVintageEngine",
    "jUnitMockitoExt"
]

testTools = [
    "assertJ",
    "elmyr",
    "elmyrInject",
    "elmyrJUnit5",
    "elmyrJVM",
    "mockitoKotlin",
    "kotlinReflect"
]

androidXNavigation = [
    "androidXNavigationFragment",
    "androidXNavigationRuntime"
]

androidXSupportBase = [
    "androidXAppCompat",
    "androidXConstraintLayout",
    "googleMaterial"
]

androidXCompose = [
    "androidXComposeNavigation",
    "androidXComposeRuntime",
    "androidXComposeUi",
    "androidXComposeUiTooling",
    "androidXComposeMaterial",
]

openTracing = [
    "openTracingApi",
    "openTracingNoOp",
    "openTracingUtil"
]

integrationTests = [
    "androidXTestCore",
    "androidXTestRunner",
    "androidXTestRules",
    "androidXTestJUnitExt",
    "androidXEspressoCore",
    "androidXEspressoContrib",
    "androidXEspressoIntents",
    "androidXEspressoWeb",
    "elmyr",
    "elmyrInject",
    "elmyrJUnit4"
]

fresco = [
    "frescoCore",
    "frescoOkHttp3"
]

glide = [
    "glideAnnotations",
    "glideCore",
    "glideOkHttp3",
]

exoplayer = [
    "exoplayer",
    "exoplayerDataSource",
    "exoplayerOkHttp"
]

ktor = [
    "ktorCore",
    "ktorGson",
]
ktorServer = [
    "ktorServerCore",
    "ktorServerNetty",
    "ktorServerSSE"
]
ktorClient = [
    "ktorClientCore",
    "ktorClientOkHttp",
    "ktorContentNegotiation",
    "ktorSerializationKotlinxJson"
]

traceCore = [
    "jctools",
    "re2j"
]

[plugins]
versionsGradlePlugin = { id = "com.github.ben-manes.versions", version.ref = "versionsGradlePlugin" }
nexusPublishGradlePlugin = { id = "io.github.gradle-nexus.publish-plugin", version.ref = "nexusPublishGradlePlugin" }
datadogGradlePlugin = { id = "com.datadoghq.dd-sdk-android-gradle-plugin", version.ref = "datadogPlugin" }
androidXBenchmark = { id = "androidx.benchmark", version.ref = "benchmark" }

